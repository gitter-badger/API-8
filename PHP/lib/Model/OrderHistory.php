<?php
/**
 * OrderHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OrderHistory Class Doc Comment
 *
 * @category    Class
 * @description Describe the history related to an order
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderHistory implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'orderHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'change_order_reportings' => '\Swagger\Client\Model\ChangeOrderReporting[]',
        'harvest_order_reportings' => '\Swagger\Client\Model\HarvestOrderReporting[]',
        'last_modification_utc_date' => '\DateTime',
        'info' => '\Swagger\Client\Model\BeezUPCommonInfoSummaries'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'change_order_reportings' => 'changeOrderReportings',
        'harvest_order_reportings' => 'harvestOrderReportings',
        'last_modification_utc_date' => 'lastModificationUtcDate',
        'info' => 'info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'change_order_reportings' => 'setChangeOrderReportings',
        'harvest_order_reportings' => 'setHarvestOrderReportings',
        'last_modification_utc_date' => 'setLastModificationUtcDate',
        'info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'change_order_reportings' => 'getChangeOrderReportings',
        'harvest_order_reportings' => 'getHarvestOrderReportings',
        'last_modification_utc_date' => 'getLastModificationUtcDate',
        'info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['change_order_reportings'] = isset($data['change_order_reportings']) ? $data['change_order_reportings'] : null;
        $this->container['harvest_order_reportings'] = isset($data['harvest_order_reportings']) ? $data['harvest_order_reportings'] : null;
        $this->container['last_modification_utc_date'] = isset($data['last_modification_utc_date']) ? $data['last_modification_utc_date'] : null;
        $this->container['info'] = isset($data['info']) ? $data['info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets change_order_reportings
     * @return \Swagger\Client\Model\ChangeOrderReporting[]
     */
    public function getChangeOrderReportings()
    {
        return $this->container['change_order_reportings'];
    }

    /**
     * Sets change_order_reportings
     * @param \Swagger\Client\Model\ChangeOrderReporting[] $change_order_reportings The list of change order operation
     * @return $this
     */
    public function setChangeOrderReportings($change_order_reportings)
    {
        $this->container['change_order_reportings'] = $change_order_reportings;

        return $this;
    }

    /**
     * Gets harvest_order_reportings
     * @return \Swagger\Client\Model\HarvestOrderReporting[]
     */
    public function getHarvestOrderReportings()
    {
        return $this->container['harvest_order_reportings'];
    }

    /**
     * Sets harvest_order_reportings
     * @param \Swagger\Client\Model\HarvestOrderReporting[] $harvest_order_reportings
     * @return $this
     */
    public function setHarvestOrderReportings($harvest_order_reportings)
    {
        $this->container['harvest_order_reportings'] = $harvest_order_reportings;

        return $this;
    }

    /**
     * Gets last_modification_utc_date
     * @return \DateTime
     */
    public function getLastModificationUtcDate()
    {
        return $this->container['last_modification_utc_date'];
    }

    /**
     * Sets last_modification_utc_date
     * @param \DateTime $last_modification_utc_date
     * @return $this
     */
    public function setLastModificationUtcDate($last_modification_utc_date)
    {
        $this->container['last_modification_utc_date'] = $last_modification_utc_date;

        return $this;
    }

    /**
     * Gets info
     * @return \Swagger\Client\Model\BeezUPCommonInfoSummaries
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     * @param \Swagger\Client\Model\BeezUPCommonInfoSummaries $info
     * @return $this
     */
    public function setInfo($info)
    {
        $this->container['info'] = $info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


