<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Invoice Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_date' => '\DateTime',
        'contract_id' => '\Swagger\Client\Model\ContractId',
        'invoice_number' => '\Swagger\Client\Model\InvoiceNumber',
        'amount' => 'double',
        'amount_to_be_paid' => 'double',
        'currency_code' => '\Swagger\Client\Model\BeezUPCommonCurrencyCode',
        'payment_status' => '\Swagger\Client\Model\InvoicePaymentStatus',
        'due_date' => '\DateTime',
        'invoice_url' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_date' => 'invoiceDate',
        'contract_id' => 'contractId',
        'invoice_number' => 'invoiceNumber',
        'amount' => 'amount',
        'amount_to_be_paid' => 'amountToBePaid',
        'currency_code' => 'currencyCode',
        'payment_status' => 'paymentStatus',
        'due_date' => 'dueDate',
        'invoice_url' => 'invoiceUrl'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'invoice_date' => 'setInvoiceDate',
        'contract_id' => 'setContractId',
        'invoice_number' => 'setInvoiceNumber',
        'amount' => 'setAmount',
        'amount_to_be_paid' => 'setAmountToBePaid',
        'currency_code' => 'setCurrencyCode',
        'payment_status' => 'setPaymentStatus',
        'due_date' => 'setDueDate',
        'invoice_url' => 'setInvoiceUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'invoice_date' => 'getInvoiceDate',
        'contract_id' => 'getContractId',
        'invoice_number' => 'getInvoiceNumber',
        'amount' => 'getAmount',
        'amount_to_be_paid' => 'getAmountToBePaid',
        'currency_code' => 'getCurrencyCode',
        'payment_status' => 'getPaymentStatus',
        'due_date' => 'getDueDate',
        'invoice_url' => 'getInvoiceUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['contract_id'] = isset($data['contract_id']) ? $data['contract_id'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_to_be_paid'] = isset($data['amount_to_be_paid']) ? $data['amount_to_be_paid'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['invoice_url'] = isset($data['invoice_url']) ? $data['invoice_url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['invoice_date'] === null) {
            $invalid_properties[] = "'invoice_date' can't be null";
        }
        if ($this->container['contract_id'] === null) {
            $invalid_properties[] = "'contract_id' can't be null";
        }
        if ($this->container['invoice_number'] === null) {
            $invalid_properties[] = "'invoice_number' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if ($this->container['amount_to_be_paid'] === null) {
            $invalid_properties[] = "'amount_to_be_paid' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalid_properties[] = "'currency_code' can't be null";
        }
        if ($this->container['payment_status'] === null) {
            $invalid_properties[] = "'payment_status' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalid_properties[] = "'due_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['invoice_date'] === null) {
            return false;
        }
        if ($this->container['contract_id'] === null) {
            return false;
        }
        if ($this->container['invoice_number'] === null) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['amount_to_be_paid'] === null) {
            return false;
        }
        if ($this->container['currency_code'] === null) {
            return false;
        }
        if ($this->container['payment_status'] === null) {
            return false;
        }
        if ($this->container['due_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets invoice_date
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     * @param \DateTime $invoice_date The invoice date
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets contract_id
     * @return \Swagger\Client\Model\ContractId
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     * @param \Swagger\Client\Model\ContractId $contract_id
     * @return $this
     */
    public function setContractId($contract_id)
    {
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets invoice_number
     * @return \Swagger\Client\Model\InvoiceNumber
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     * @param \Swagger\Client\Model\InvoiceNumber $invoice_number
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets amount
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param double $amount The amount of your invoice
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_to_be_paid
     * @return double
     */
    public function getAmountToBePaid()
    {
        return $this->container['amount_to_be_paid'];
    }

    /**
     * Sets amount_to_be_paid
     * @param double $amount_to_be_paid The remaining amount to be paid for this invoice
     * @return $this
     */
    public function setAmountToBePaid($amount_to_be_paid)
    {
        $this->container['amount_to_be_paid'] = $amount_to_be_paid;

        return $this;
    }

    /**
     * Gets currency_code
     * @return \Swagger\Client\Model\BeezUPCommonCurrencyCode
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param \Swagger\Client\Model\BeezUPCommonCurrencyCode $currency_code
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets payment_status
     * @return \Swagger\Client\Model\InvoicePaymentStatus
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     * @param \Swagger\Client\Model\InvoicePaymentStatus $payment_status
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets due_date
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     * @param \DateTime $due_date
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets invoice_url
     * @return string
     */
    public function getInvoiceUrl()
    {
        return $this->container['invoice_url'];
    }

    /**
     * Sets invoice_url
     * @param string $invoice_url The url of the invoice document
     * @return $this
     */
    public function setInvoiceUrl($invoice_url)
    {
        $this->container['invoice_url'] = $invoice_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


