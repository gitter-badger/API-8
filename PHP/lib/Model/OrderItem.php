<?php
/**
 * OrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OrderItem Class Doc Comment
 *
 * @category    Class
 * @description Describe an order item. All properties with the prefix orderItem_ are translated in the list of values /user/lov/OrderMetaInfoOrderItems
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'orderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'beez_up_order_item_id' => 'string',
        'order_item_order_item_type' => 'string',
        'order_item_merchant_imported_product_id' => 'string',
        'order_item_merchant_imported_product_id_column_name' => 'string',
        'order_item_merchant_imported_product_url' => 'string',
        'order_item_merchant_product_id_column_name' => 'string',
        'order_item_beez_up_store_id' => 'string',
        'order_item_item_tax' => 'float',
        'order_item_title' => 'string',
        'order_item_image_url' => 'string',
        'order_item_merchant_product_id' => 'string',
        'order_item_market_place_product_id' => 'string',
        'order_item_item_price' => 'float',
        'order_item_quantity' => 'float',
        'order_item_total_price' => 'float',
        'order_item_shipping_price' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'beez_up_order_item_id' => 'beezUPOrderItemId',
        'order_item_order_item_type' => 'orderItem_OrderItemType',
        'order_item_merchant_imported_product_id' => 'orderItem_MerchantImportedProductId',
        'order_item_merchant_imported_product_id_column_name' => 'orderItem_MerchantImportedProductIdColumnName',
        'order_item_merchant_imported_product_url' => 'orderItem_MerchantImportedProductUrl',
        'order_item_merchant_product_id_column_name' => 'orderItem_MerchantProductIdColumnName',
        'order_item_beez_up_store_id' => 'orderItem_BeezUPStoreId',
        'order_item_item_tax' => 'orderItem_ItemTax',
        'order_item_title' => 'orderItem_Title',
        'order_item_image_url' => 'orderItem_ImageUrl',
        'order_item_merchant_product_id' => 'orderItem_MerchantProductId',
        'order_item_market_place_product_id' => 'orderItem_MarketPlaceProductId',
        'order_item_item_price' => 'orderItem_ItemPrice',
        'order_item_quantity' => 'orderItem_Quantity',
        'order_item_total_price' => 'orderItem_TotalPrice',
        'order_item_shipping_price' => 'orderItem_Shipping_Price'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'beez_up_order_item_id' => 'setBeezUpOrderItemId',
        'order_item_order_item_type' => 'setOrderItemOrderItemType',
        'order_item_merchant_imported_product_id' => 'setOrderItemMerchantImportedProductId',
        'order_item_merchant_imported_product_id_column_name' => 'setOrderItemMerchantImportedProductIdColumnName',
        'order_item_merchant_imported_product_url' => 'setOrderItemMerchantImportedProductUrl',
        'order_item_merchant_product_id_column_name' => 'setOrderItemMerchantProductIdColumnName',
        'order_item_beez_up_store_id' => 'setOrderItemBeezUpStoreId',
        'order_item_item_tax' => 'setOrderItemItemTax',
        'order_item_title' => 'setOrderItemTitle',
        'order_item_image_url' => 'setOrderItemImageUrl',
        'order_item_merchant_product_id' => 'setOrderItemMerchantProductId',
        'order_item_market_place_product_id' => 'setOrderItemMarketPlaceProductId',
        'order_item_item_price' => 'setOrderItemItemPrice',
        'order_item_quantity' => 'setOrderItemQuantity',
        'order_item_total_price' => 'setOrderItemTotalPrice',
        'order_item_shipping_price' => 'setOrderItemShippingPrice'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'beez_up_order_item_id' => 'getBeezUpOrderItemId',
        'order_item_order_item_type' => 'getOrderItemOrderItemType',
        'order_item_merchant_imported_product_id' => 'getOrderItemMerchantImportedProductId',
        'order_item_merchant_imported_product_id_column_name' => 'getOrderItemMerchantImportedProductIdColumnName',
        'order_item_merchant_imported_product_url' => 'getOrderItemMerchantImportedProductUrl',
        'order_item_merchant_product_id_column_name' => 'getOrderItemMerchantProductIdColumnName',
        'order_item_beez_up_store_id' => 'getOrderItemBeezUpStoreId',
        'order_item_item_tax' => 'getOrderItemItemTax',
        'order_item_title' => 'getOrderItemTitle',
        'order_item_image_url' => 'getOrderItemImageUrl',
        'order_item_merchant_product_id' => 'getOrderItemMerchantProductId',
        'order_item_market_place_product_id' => 'getOrderItemMarketPlaceProductId',
        'order_item_item_price' => 'getOrderItemItemPrice',
        'order_item_quantity' => 'getOrderItemQuantity',
        'order_item_total_price' => 'getOrderItemTotalPrice',
        'order_item_shipping_price' => 'getOrderItemShippingPrice'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['beez_up_order_item_id'] = isset($data['beez_up_order_item_id']) ? $data['beez_up_order_item_id'] : null;
        $this->container['order_item_order_item_type'] = isset($data['order_item_order_item_type']) ? $data['order_item_order_item_type'] : null;
        $this->container['order_item_merchant_imported_product_id'] = isset($data['order_item_merchant_imported_product_id']) ? $data['order_item_merchant_imported_product_id'] : null;
        $this->container['order_item_merchant_imported_product_id_column_name'] = isset($data['order_item_merchant_imported_product_id_column_name']) ? $data['order_item_merchant_imported_product_id_column_name'] : null;
        $this->container['order_item_merchant_imported_product_url'] = isset($data['order_item_merchant_imported_product_url']) ? $data['order_item_merchant_imported_product_url'] : null;
        $this->container['order_item_merchant_product_id_column_name'] = isset($data['order_item_merchant_product_id_column_name']) ? $data['order_item_merchant_product_id_column_name'] : null;
        $this->container['order_item_beez_up_store_id'] = isset($data['order_item_beez_up_store_id']) ? $data['order_item_beez_up_store_id'] : null;
        $this->container['order_item_item_tax'] = isset($data['order_item_item_tax']) ? $data['order_item_item_tax'] : null;
        $this->container['order_item_title'] = isset($data['order_item_title']) ? $data['order_item_title'] : null;
        $this->container['order_item_image_url'] = isset($data['order_item_image_url']) ? $data['order_item_image_url'] : null;
        $this->container['order_item_merchant_product_id'] = isset($data['order_item_merchant_product_id']) ? $data['order_item_merchant_product_id'] : null;
        $this->container['order_item_market_place_product_id'] = isset($data['order_item_market_place_product_id']) ? $data['order_item_market_place_product_id'] : null;
        $this->container['order_item_item_price'] = isset($data['order_item_item_price']) ? $data['order_item_item_price'] : null;
        $this->container['order_item_quantity'] = isset($data['order_item_quantity']) ? $data['order_item_quantity'] : null;
        $this->container['order_item_total_price'] = isset($data['order_item_total_price']) ? $data['order_item_total_price'] : null;
        $this->container['order_item_shipping_price'] = isset($data['order_item_shipping_price']) ? $data['order_item_shipping_price'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['beez_up_order_item_id'] === null) {
            $invalid_properties[] = "'beez_up_order_item_id' can't be null";
        }
        if ($this->container['order_item_order_item_type'] === null) {
            $invalid_properties[] = "'order_item_order_item_type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['beez_up_order_item_id'] === null) {
            return false;
        }
        if ($this->container['order_item_order_item_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets beez_up_order_item_id
     * @return string
     */
    public function getBeezUpOrderItemId()
    {
        return $this->container['beez_up_order_item_id'];
    }

    /**
     * Sets beez_up_order_item_id
     * @param string $beez_up_order_item_id The BeezUP identifier of the order Item
     * @return $this
     */
    public function setBeezUpOrderItemId($beez_up_order_item_id)
    {
        $this->container['beez_up_order_item_id'] = $beez_up_order_item_id;

        return $this;
    }

    /**
     * Gets order_item_order_item_type
     * @return string
     */
    public function getOrderItemOrderItemType()
    {
        return $this->container['order_item_order_item_type'];
    }

    /**
     * Sets order_item_order_item_type
     * @param string $order_item_order_item_type The order item type of the order item
     * @return $this
     */
    public function setOrderItemOrderItemType($order_item_order_item_type)
    {
        $this->container['order_item_order_item_type'] = $order_item_order_item_type;

        return $this;
    }

    /**
     * Gets order_item_merchant_imported_product_id
     * @return string
     */
    public function getOrderItemMerchantImportedProductId()
    {
        return $this->container['order_item_merchant_imported_product_id'];
    }

    /**
     * Sets order_item_merchant_imported_product_id
     * @param string $order_item_merchant_imported_product_id The product id indicated in the catalog importation in BeezUP system for this order item. This property will help you to match the order to the inventory system.
     * @return $this
     */
    public function setOrderItemMerchantImportedProductId($order_item_merchant_imported_product_id)
    {
        $this->container['order_item_merchant_imported_product_id'] = $order_item_merchant_imported_product_id;

        return $this;
    }

    /**
     * Gets order_item_merchant_imported_product_id_column_name
     * @return string
     */
    public function getOrderItemMerchantImportedProductIdColumnName()
    {
        return $this->container['order_item_merchant_imported_product_id_column_name'];
    }

    /**
     * Sets order_item_merchant_imported_product_id_column_name
     * @param string $order_item_merchant_imported_product_id_column_name The column name for the product id indicated in the catalog importation in BeezUP system related to this order item. This property will help you to match the order to the inventory system.
     * @return $this
     */
    public function setOrderItemMerchantImportedProductIdColumnName($order_item_merchant_imported_product_id_column_name)
    {
        $this->container['order_item_merchant_imported_product_id_column_name'] = $order_item_merchant_imported_product_id_column_name;

        return $this;
    }

    /**
     * Gets order_item_merchant_imported_product_url
     * @return string
     */
    public function getOrderItemMerchantImportedProductUrl()
    {
        return $this->container['order_item_merchant_imported_product_url'];
    }

    /**
     * Sets order_item_merchant_imported_product_url
     * @param string $order_item_merchant_imported_product_url The product url indicated in the catalog importation in BeezUP system related to this order item
     * @return $this
     */
    public function setOrderItemMerchantImportedProductUrl($order_item_merchant_imported_product_url)
    {
        $this->container['order_item_merchant_imported_product_url'] = $order_item_merchant_imported_product_url;

        return $this;
    }

    /**
     * Gets order_item_merchant_product_id_column_name
     * @return string
     */
    public function getOrderItemMerchantProductIdColumnName()
    {
        return $this->container['order_item_merchant_product_id_column_name'];
    }

    /**
     * Sets order_item_merchant_product_id_column_name
     * @param string $order_item_merchant_product_id_column_name The column name indicate in the mapping for the product id related to the order item
     * @return $this
     */
    public function setOrderItemMerchantProductIdColumnName($order_item_merchant_product_id_column_name)
    {
        $this->container['order_item_merchant_product_id_column_name'] = $order_item_merchant_product_id_column_name;

        return $this;
    }

    /**
     * Gets order_item_beez_up_store_id
     * @return string
     */
    public function getOrderItemBeezUpStoreId()
    {
        return $this->container['order_item_beez_up_store_id'];
    }

    /**
     * Sets order_item_beez_up_store_id
     * @param string $order_item_beez_up_store_id The store id in the beezup system related to the order item. This property will help you to match the order to the inventory system.
     * @return $this
     */
    public function setOrderItemBeezUpStoreId($order_item_beez_up_store_id)
    {
        $this->container['order_item_beez_up_store_id'] = $order_item_beez_up_store_id;

        return $this;
    }

    /**
     * Gets order_item_item_tax
     * @return float
     */
    public function getOrderItemItemTax()
    {
        return $this->container['order_item_item_tax'];
    }

    /**
     * Sets order_item_item_tax
     * @param float $order_item_item_tax The tax of the order item
     * @return $this
     */
    public function setOrderItemItemTax($order_item_item_tax)
    {
        $this->container['order_item_item_tax'] = $order_item_item_tax;

        return $this;
    }

    /**
     * Gets order_item_title
     * @return string
     */
    public function getOrderItemTitle()
    {
        return $this->container['order_item_title'];
    }

    /**
     * Sets order_item_title
     * @param string $order_item_title The title of the order item
     * @return $this
     */
    public function setOrderItemTitle($order_item_title)
    {
        $this->container['order_item_title'] = $order_item_title;

        return $this;
    }

    /**
     * Gets order_item_image_url
     * @return string
     */
    public function getOrderItemImageUrl()
    {
        return $this->container['order_item_image_url'];
    }

    /**
     * Sets order_item_image_url
     * @param string $order_item_image_url The URL of the image of the order item
     * @return $this
     */
    public function setOrderItemImageUrl($order_item_image_url)
    {
        $this->container['order_item_image_url'] = $order_item_image_url;

        return $this;
    }

    /**
     * Gets order_item_merchant_product_id
     * @return string
     */
    public function getOrderItemMerchantProductId()
    {
        return $this->container['order_item_merchant_product_id'];
    }

    /**
     * Sets order_item_merchant_product_id
     * @param string $order_item_merchant_product_id The merchant product id of the order item
     * @return $this
     */
    public function setOrderItemMerchantProductId($order_item_merchant_product_id)
    {
        $this->container['order_item_merchant_product_id'] = $order_item_merchant_product_id;

        return $this;
    }

    /**
     * Gets order_item_market_place_product_id
     * @return string
     */
    public function getOrderItemMarketPlaceProductId()
    {
        return $this->container['order_item_market_place_product_id'];
    }

    /**
     * Sets order_item_market_place_product_id
     * @param string $order_item_market_place_product_id The marketplace product identifier of the order item
     * @return $this
     */
    public function setOrderItemMarketPlaceProductId($order_item_market_place_product_id)
    {
        $this->container['order_item_market_place_product_id'] = $order_item_market_place_product_id;

        return $this;
    }

    /**
     * Gets order_item_item_price
     * @return float
     */
    public function getOrderItemItemPrice()
    {
        return $this->container['order_item_item_price'];
    }

    /**
     * Sets order_item_item_price
     * @param float $order_item_item_price The price of the order item
     * @return $this
     */
    public function setOrderItemItemPrice($order_item_item_price)
    {
        $this->container['order_item_item_price'] = $order_item_item_price;

        return $this;
    }

    /**
     * Gets order_item_quantity
     * @return float
     */
    public function getOrderItemQuantity()
    {
        return $this->container['order_item_quantity'];
    }

    /**
     * Sets order_item_quantity
     * @param float $order_item_quantity The quantity of the order item
     * @return $this
     */
    public function setOrderItemQuantity($order_item_quantity)
    {
        $this->container['order_item_quantity'] = $order_item_quantity;

        return $this;
    }

    /**
     * Gets order_item_total_price
     * @return float
     */
    public function getOrderItemTotalPrice()
    {
        return $this->container['order_item_total_price'];
    }

    /**
     * Sets order_item_total_price
     * @param float $order_item_total_price The total price of the order item
     * @return $this
     */
    public function setOrderItemTotalPrice($order_item_total_price)
    {
        $this->container['order_item_total_price'] = $order_item_total_price;

        return $this;
    }

    /**
     * Gets order_item_shipping_price
     * @return float
     */
    public function getOrderItemShippingPrice()
    {
        return $this->container['order_item_shipping_price'];
    }

    /**
     * Sets order_item_shipping_price
     * @param float $order_item_shipping_price The shipping price of the order item
     * @return $this
     */
    public function setOrderItemShippingPrice($order_item_shipping_price)
    {
        $this->container['order_item_shipping_price'] = $order_item_shipping_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


