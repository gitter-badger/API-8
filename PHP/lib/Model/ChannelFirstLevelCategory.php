<?php
/**
 * ChannelFirstLevelCategory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ChannelFirstLevelCategory Class Doc Comment
 *
 * @category    Class
 * @description The first level category with his sub categories
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelFirstLevelCategory implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'channelFirstLevelCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel_category_id' => '\Swagger\Client\Model\BeezUPCommonChannelCategoryId',
        'channel_category_name' => 'string',
        'channel_category_level' => '\Swagger\Client\Model\ChannelCategoryLevel',
        'channel_category_default_cost' => '\Swagger\Client\Model\ChannelCategoryDefaultCost',
        'channel_category_channel_code' => '\Swagger\Client\Model\ChannelCategoryChannelCode',
        'channel_category_column_overrides' => '\Swagger\Client\Model\ChannelCategoryColumnOverrides',
        'sub_categories' => '\Swagger\Client\Model\ChannelCategory[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_category_id' => 'channelCategoryId',
        'channel_category_name' => 'channelCategoryName',
        'channel_category_level' => 'channelCategoryLevel',
        'channel_category_default_cost' => 'channelCategoryDefaultCost',
        'channel_category_channel_code' => 'channelCategoryChannelCode',
        'channel_category_column_overrides' => 'channelCategoryColumnOverrides',
        'sub_categories' => 'subCategories'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'channel_category_id' => 'setChannelCategoryId',
        'channel_category_name' => 'setChannelCategoryName',
        'channel_category_level' => 'setChannelCategoryLevel',
        'channel_category_default_cost' => 'setChannelCategoryDefaultCost',
        'channel_category_channel_code' => 'setChannelCategoryChannelCode',
        'channel_category_column_overrides' => 'setChannelCategoryColumnOverrides',
        'sub_categories' => 'setSubCategories'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'channel_category_id' => 'getChannelCategoryId',
        'channel_category_name' => 'getChannelCategoryName',
        'channel_category_level' => 'getChannelCategoryLevel',
        'channel_category_default_cost' => 'getChannelCategoryDefaultCost',
        'channel_category_channel_code' => 'getChannelCategoryChannelCode',
        'channel_category_column_overrides' => 'getChannelCategoryColumnOverrides',
        'sub_categories' => 'getSubCategories'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_category_id'] = isset($data['channel_category_id']) ? $data['channel_category_id'] : null;
        $this->container['channel_category_name'] = isset($data['channel_category_name']) ? $data['channel_category_name'] : null;
        $this->container['channel_category_level'] = isset($data['channel_category_level']) ? $data['channel_category_level'] : null;
        $this->container['channel_category_default_cost'] = isset($data['channel_category_default_cost']) ? $data['channel_category_default_cost'] : null;
        $this->container['channel_category_channel_code'] = isset($data['channel_category_channel_code']) ? $data['channel_category_channel_code'] : null;
        $this->container['channel_category_column_overrides'] = isset($data['channel_category_column_overrides']) ? $data['channel_category_column_overrides'] : null;
        $this->container['sub_categories'] = isset($data['sub_categories']) ? $data['sub_categories'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['channel_category_id'] === null) {
            $invalid_properties[] = "'channel_category_id' can't be null";
        }
        if ($this->container['channel_category_name'] === null) {
            $invalid_properties[] = "'channel_category_name' can't be null";
        }
        if ($this->container['channel_category_level'] === null) {
            $invalid_properties[] = "'channel_category_level' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['channel_category_id'] === null) {
            return false;
        }
        if ($this->container['channel_category_name'] === null) {
            return false;
        }
        if ($this->container['channel_category_level'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets channel_category_id
     * @return \Swagger\Client\Model\BeezUPCommonChannelCategoryId
     */
    public function getChannelCategoryId()
    {
        return $this->container['channel_category_id'];
    }

    /**
     * Sets channel_category_id
     * @param \Swagger\Client\Model\BeezUPCommonChannelCategoryId $channel_category_id
     * @return $this
     */
    public function setChannelCategoryId($channel_category_id)
    {
        $this->container['channel_category_id'] = $channel_category_id;

        return $this;
    }

    /**
     * Gets channel_category_name
     * @return string
     */
    public function getChannelCategoryName()
    {
        return $this->container['channel_category_name'];
    }

    /**
     * Sets channel_category_name
     * @param string $channel_category_name The channel category name
     * @return $this
     */
    public function setChannelCategoryName($channel_category_name)
    {
        $this->container['channel_category_name'] = $channel_category_name;

        return $this;
    }

    /**
     * Gets channel_category_level
     * @return \Swagger\Client\Model\ChannelCategoryLevel
     */
    public function getChannelCategoryLevel()
    {
        return $this->container['channel_category_level'];
    }

    /**
     * Sets channel_category_level
     * @param \Swagger\Client\Model\ChannelCategoryLevel $channel_category_level
     * @return $this
     */
    public function setChannelCategoryLevel($channel_category_level)
    {
        $this->container['channel_category_level'] = $channel_category_level;

        return $this;
    }

    /**
     * Gets channel_category_default_cost
     * @return \Swagger\Client\Model\ChannelCategoryDefaultCost
     */
    public function getChannelCategoryDefaultCost()
    {
        return $this->container['channel_category_default_cost'];
    }

    /**
     * Sets channel_category_default_cost
     * @param \Swagger\Client\Model\ChannelCategoryDefaultCost $channel_category_default_cost
     * @return $this
     */
    public function setChannelCategoryDefaultCost($channel_category_default_cost)
    {
        $this->container['channel_category_default_cost'] = $channel_category_default_cost;

        return $this;
    }

    /**
     * Gets channel_category_channel_code
     * @return \Swagger\Client\Model\ChannelCategoryChannelCode
     */
    public function getChannelCategoryChannelCode()
    {
        return $this->container['channel_category_channel_code'];
    }

    /**
     * Sets channel_category_channel_code
     * @param \Swagger\Client\Model\ChannelCategoryChannelCode $channel_category_channel_code
     * @return $this
     */
    public function setChannelCategoryChannelCode($channel_category_channel_code)
    {
        $this->container['channel_category_channel_code'] = $channel_category_channel_code;

        return $this;
    }

    /**
     * Gets channel_category_column_overrides
     * @return \Swagger\Client\Model\ChannelCategoryColumnOverrides
     */
    public function getChannelCategoryColumnOverrides()
    {
        return $this->container['channel_category_column_overrides'];
    }

    /**
     * Sets channel_category_column_overrides
     * @param \Swagger\Client\Model\ChannelCategoryColumnOverrides $channel_category_column_overrides
     * @return $this
     */
    public function setChannelCategoryColumnOverrides($channel_category_column_overrides)
    {
        $this->container['channel_category_column_overrides'] = $channel_category_column_overrides;

        return $this;
    }

    /**
     * Gets sub_categories
     * @return \Swagger\Client\Model\ChannelCategory[]
     */
    public function getSubCategories()
    {
        return $this->container['sub_categories'];
    }

    /**
     * Sets sub_categories
     * @param \Swagger\Client\Model\ChannelCategory[] $sub_categories
     * @return $this
     */
    public function setSubCategories($sub_categories)
    {
        $this->container['sub_categories'] = $sub_categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


