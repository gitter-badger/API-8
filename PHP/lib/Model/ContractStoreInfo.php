<?php
/**
 * ContractStoreInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ContractStoreInfo Class Doc Comment
 *
 * @category    Class
 * @description Describe the store information related to the offer.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ContractStoreInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'contractStoreInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'store_count' => '\Swagger\Client\Model\StoreCount',
        'max_store_count' => 'int',
        'min_store_count' => 'int',
        'owned_store_count' => 'int',
        'additional_store_price' => 'double',
        'store_included' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'store_count' => 'storeCount',
        'max_store_count' => 'maxStoreCount',
        'min_store_count' => 'minStoreCount',
        'owned_store_count' => 'ownedStoreCount',
        'additional_store_price' => 'additionalStorePrice',
        'store_included' => 'storeIncluded'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'store_count' => 'setStoreCount',
        'max_store_count' => 'setMaxStoreCount',
        'min_store_count' => 'setMinStoreCount',
        'owned_store_count' => 'setOwnedStoreCount',
        'additional_store_price' => 'setAdditionalStorePrice',
        'store_included' => 'setStoreIncluded'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'store_count' => 'getStoreCount',
        'max_store_count' => 'getMaxStoreCount',
        'min_store_count' => 'getMinStoreCount',
        'owned_store_count' => 'getOwnedStoreCount',
        'additional_store_price' => 'getAdditionalStorePrice',
        'store_included' => 'getStoreIncluded'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store_count'] = isset($data['store_count']) ? $data['store_count'] : null;
        $this->container['max_store_count'] = isset($data['max_store_count']) ? $data['max_store_count'] : null;
        $this->container['min_store_count'] = isset($data['min_store_count']) ? $data['min_store_count'] : null;
        $this->container['owned_store_count'] = isset($data['owned_store_count']) ? $data['owned_store_count'] : null;
        $this->container['additional_store_price'] = isset($data['additional_store_price']) ? $data['additional_store_price'] : null;
        $this->container['store_included'] = isset($data['store_included']) ? $data['store_included'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets store_count
     * @return \Swagger\Client\Model\StoreCount
     */
    public function getStoreCount()
    {
        return $this->container['store_count'];
    }

    /**
     * Sets store_count
     * @param \Swagger\Client\Model\StoreCount $store_count
     * @return $this
     */
    public function setStoreCount($store_count)
    {
        $this->container['store_count'] = $store_count;

        return $this;
    }

    /**
     * Gets max_store_count
     * @return int
     */
    public function getMaxStoreCount()
    {
        return $this->container['max_store_count'];
    }

    /**
     * Sets max_store_count
     * @param int $max_store_count The maximum store count related to the offer.
     * @return $this
     */
    public function setMaxStoreCount($max_store_count)
    {
        $this->container['max_store_count'] = $max_store_count;

        return $this;
    }

    /**
     * Gets min_store_count
     * @return int
     */
    public function getMinStoreCount()
    {
        return $this->container['min_store_count'];
    }

    /**
     * Sets min_store_count
     * @param int $min_store_count The minimum store count related to the offer.
     * @return $this
     */
    public function setMinStoreCount($min_store_count)
    {
        $this->container['min_store_count'] = $min_store_count;

        return $this;
    }

    /**
     * Gets owned_store_count
     * @return int
     */
    public function getOwnedStoreCount()
    {
        return $this->container['owned_store_count'];
    }

    /**
     * Sets owned_store_count
     * @param int $owned_store_count The owned store count.
     * @return $this
     */
    public function setOwnedStoreCount($owned_store_count)
    {
        $this->container['owned_store_count'] = $owned_store_count;

        return $this;
    }

    /**
     * Gets additional_store_price
     * @return double
     */
    public function getAdditionalStorePrice()
    {
        return $this->container['additional_store_price'];
    }

    /**
     * Sets additional_store_price
     * @param double $additional_store_price The additional store price.
     * @return $this
     */
    public function setAdditionalStorePrice($additional_store_price)
    {
        $this->container['additional_store_price'] = $additional_store_price;

        return $this;
    }

    /**
     * Gets store_included
     * @return int
     */
    public function getStoreIncluded()
    {
        return $this->container['store_included'];
    }

    /**
     * Sets store_included
     * @param int $store_included The store count included in the offer.
     * @return $this
     */
    public function setStoreIncluded($store_included)
    {
        $this->container['store_included'] = $store_included;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


