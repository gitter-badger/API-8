<?php
/**
 * BeezUPCommonInfoSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * BeezUPCommonInfoSummary Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BeezUPCommonInfoSummary implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BeezUP.Common.InfoSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'information_code' => 'string',
        'information_message' => 'string',
        'information_arguments' => 'map[string,string]',
        'property_name' => 'string',
        'property_value' => 'string',
        'object_name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'information_code' => 'informationCode',
        'information_message' => 'informationMessage',
        'information_arguments' => 'informationArguments',
        'property_name' => 'propertyName',
        'property_value' => 'propertyValue',
        'object_name' => 'objectName'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'information_code' => 'setInformationCode',
        'information_message' => 'setInformationMessage',
        'information_arguments' => 'setInformationArguments',
        'property_name' => 'setPropertyName',
        'property_value' => 'setPropertyValue',
        'object_name' => 'setObjectName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'information_code' => 'getInformationCode',
        'information_message' => 'getInformationMessage',
        'information_arguments' => 'getInformationArguments',
        'property_name' => 'getPropertyName',
        'property_value' => 'getPropertyValue',
        'object_name' => 'getObjectName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['information_code'] = isset($data['information_code']) ? $data['information_code'] : null;
        $this->container['information_message'] = isset($data['information_message']) ? $data['information_message'] : null;
        $this->container['information_arguments'] = isset($data['information_arguments']) ? $data['information_arguments'] : null;
        $this->container['property_name'] = isset($data['property_name']) ? $data['property_name'] : null;
        $this->container['property_value'] = isset($data['property_value']) ? $data['property_value'] : null;
        $this->container['object_name'] = isset($data['object_name']) ? $data['object_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets information_code
     * @return string
     */
    public function getInformationCode()
    {
        return $this->container['information_code'];
    }

    /**
     * Sets information_code
     * @param string $information_code
     * @return $this
     */
    public function setInformationCode($information_code)
    {
        $this->container['information_code'] = $information_code;

        return $this;
    }

    /**
     * Gets information_message
     * @return string
     */
    public function getInformationMessage()
    {
        return $this->container['information_message'];
    }

    /**
     * Sets information_message
     * @param string $information_message
     * @return $this
     */
    public function setInformationMessage($information_message)
    {
        $this->container['information_message'] = $information_message;

        return $this;
    }

    /**
     * Gets information_arguments
     * @return map[string,string]
     */
    public function getInformationArguments()
    {
        return $this->container['information_arguments'];
    }

    /**
     * Sets information_arguments
     * @param map[string,string] $information_arguments
     * @return $this
     */
    public function setInformationArguments($information_arguments)
    {
        $this->container['information_arguments'] = $information_arguments;

        return $this;
    }

    /**
     * Gets property_name
     * @return string
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     * @param string $property_name
     * @return $this
     */
    public function setPropertyName($property_name)
    {
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets property_value
     * @return string
     */
    public function getPropertyValue()
    {
        return $this->container['property_value'];
    }

    /**
     * Sets property_value
     * @param string $property_value
     * @return $this
     */
    public function setPropertyValue($property_value)
    {
        $this->container['property_value'] = $property_value;

        return $this;
    }

    /**
     * Gets object_name
     * @return string
     */
    public function getObjectName()
    {
        return $this->container['object_name'];
    }

    /**
     * Sets object_name
     * @param string $object_name
     * @return $this
     */
    public function setObjectName($object_name)
    {
        $this->container['object_name'] = $object_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


