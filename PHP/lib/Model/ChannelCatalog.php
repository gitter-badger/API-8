<?php
/**
 * ChannelCatalog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ChannelCatalog Class Doc Comment
 *
 * @category    Class
 * @description The channel catalog
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelCatalog implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'channelCatalog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'is_marketplace' => 'bool',
        'channel_catalog_id' => '\Swagger\Client\Model\BeezUPCommonChannelCatalogId',
        'channel_id' => '\Swagger\Client\Model\BeezUPCommonChannelId',
        'channel_name' => '\Swagger\Client\Model\BeezUPCommonChannelName',
        'store_id' => '\Swagger\Client\Model\BeezUPCommonStoreId',
        'general_settings' => '\Swagger\Client\Model\GeneralSettings',
        'cost_settings' => '\Swagger\Client\Model\CostSettings',
        'column_mappings' => '\Swagger\Client\Model\ColumnMappings',
        'exclusion_filters' => '\Swagger\Client\Model\ExclusionFilters',
        'export_url' => '\Swagger\Client\Model\BeezUPCommonHttpUrl',
        'status' => '\Swagger\Client\Model\ChannelCatalogStatus',
        'links' => '\Swagger\Client\Model\BeezUPCommonLink2[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'is_marketplace' => 'isMarketplace',
        'channel_catalog_id' => 'channelCatalogId',
        'channel_id' => 'channelId',
        'channel_name' => 'channelName',
        'store_id' => 'storeId',
        'general_settings' => 'generalSettings',
        'cost_settings' => 'costSettings',
        'column_mappings' => 'columnMappings',
        'exclusion_filters' => 'exclusionFilters',
        'export_url' => 'exportUrl',
        'status' => 'status',
        'links' => 'links'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'is_marketplace' => 'setIsMarketplace',
        'channel_catalog_id' => 'setChannelCatalogId',
        'channel_id' => 'setChannelId',
        'channel_name' => 'setChannelName',
        'store_id' => 'setStoreId',
        'general_settings' => 'setGeneralSettings',
        'cost_settings' => 'setCostSettings',
        'column_mappings' => 'setColumnMappings',
        'exclusion_filters' => 'setExclusionFilters',
        'export_url' => 'setExportUrl',
        'status' => 'setStatus',
        'links' => 'setLinks'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'is_marketplace' => 'getIsMarketplace',
        'channel_catalog_id' => 'getChannelCatalogId',
        'channel_id' => 'getChannelId',
        'channel_name' => 'getChannelName',
        'store_id' => 'getStoreId',
        'general_settings' => 'getGeneralSettings',
        'cost_settings' => 'getCostSettings',
        'column_mappings' => 'getColumnMappings',
        'exclusion_filters' => 'getExclusionFilters',
        'export_url' => 'getExportUrl',
        'status' => 'getStatus',
        'links' => 'getLinks'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['is_marketplace'] = isset($data['is_marketplace']) ? $data['is_marketplace'] : null;
        $this->container['channel_catalog_id'] = isset($data['channel_catalog_id']) ? $data['channel_catalog_id'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['channel_name'] = isset($data['channel_name']) ? $data['channel_name'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['general_settings'] = isset($data['general_settings']) ? $data['general_settings'] : null;
        $this->container['cost_settings'] = isset($data['cost_settings']) ? $data['cost_settings'] : null;
        $this->container['column_mappings'] = isset($data['column_mappings']) ? $data['column_mappings'] : null;
        $this->container['exclusion_filters'] = isset($data['exclusion_filters']) ? $data['exclusion_filters'] : null;
        $this->container['export_url'] = isset($data['export_url']) ? $data['export_url'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['channel_catalog_id'] === null) {
            $invalid_properties[] = "'channel_catalog_id' can't be null";
        }
        if ($this->container['channel_id'] === null) {
            $invalid_properties[] = "'channel_id' can't be null";
        }
        if ($this->container['store_id'] === null) {
            $invalid_properties[] = "'store_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['channel_catalog_id'] === null) {
            return false;
        }
        if ($this->container['channel_id'] === null) {
            return false;
        }
        if ($this->container['store_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param bool $enabled Indicates if the channel catalog is active
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets is_marketplace
     * @return bool
     */
    public function getIsMarketplace()
    {
        return $this->container['is_marketplace'];
    }

    /**
     * Sets is_marketplace
     * @param bool $is_marketplace Indicates if this channel catalog is related to a marketplace
     * @return $this
     */
    public function setIsMarketplace($is_marketplace)
    {
        $this->container['is_marketplace'] = $is_marketplace;

        return $this;
    }

    /**
     * Gets channel_catalog_id
     * @return \Swagger\Client\Model\BeezUPCommonChannelCatalogId
     */
    public function getChannelCatalogId()
    {
        return $this->container['channel_catalog_id'];
    }

    /**
     * Sets channel_catalog_id
     * @param \Swagger\Client\Model\BeezUPCommonChannelCatalogId $channel_catalog_id
     * @return $this
     */
    public function setChannelCatalogId($channel_catalog_id)
    {
        $this->container['channel_catalog_id'] = $channel_catalog_id;

        return $this;
    }

    /**
     * Gets channel_id
     * @return \Swagger\Client\Model\BeezUPCommonChannelId
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     * @param \Swagger\Client\Model\BeezUPCommonChannelId $channel_id
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets channel_name
     * @return \Swagger\Client\Model\BeezUPCommonChannelName
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     * @param \Swagger\Client\Model\BeezUPCommonChannelName $channel_name
     * @return $this
     */
    public function setChannelName($channel_name)
    {
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets store_id
     * @return \Swagger\Client\Model\BeezUPCommonStoreId
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     * @param \Swagger\Client\Model\BeezUPCommonStoreId $store_id
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets general_settings
     * @return \Swagger\Client\Model\GeneralSettings
     */
    public function getGeneralSettings()
    {
        return $this->container['general_settings'];
    }

    /**
     * Sets general_settings
     * @param \Swagger\Client\Model\GeneralSettings $general_settings
     * @return $this
     */
    public function setGeneralSettings($general_settings)
    {
        $this->container['general_settings'] = $general_settings;

        return $this;
    }

    /**
     * Gets cost_settings
     * @return \Swagger\Client\Model\CostSettings
     */
    public function getCostSettings()
    {
        return $this->container['cost_settings'];
    }

    /**
     * Sets cost_settings
     * @param \Swagger\Client\Model\CostSettings $cost_settings
     * @return $this
     */
    public function setCostSettings($cost_settings)
    {
        $this->container['cost_settings'] = $cost_settings;

        return $this;
    }

    /**
     * Gets column_mappings
     * @return \Swagger\Client\Model\ColumnMappings
     */
    public function getColumnMappings()
    {
        return $this->container['column_mappings'];
    }

    /**
     * Sets column_mappings
     * @param \Swagger\Client\Model\ColumnMappings $column_mappings
     * @return $this
     */
    public function setColumnMappings($column_mappings)
    {
        $this->container['column_mappings'] = $column_mappings;

        return $this;
    }

    /**
     * Gets exclusion_filters
     * @return \Swagger\Client\Model\ExclusionFilters
     */
    public function getExclusionFilters()
    {
        return $this->container['exclusion_filters'];
    }

    /**
     * Sets exclusion_filters
     * @param \Swagger\Client\Model\ExclusionFilters $exclusion_filters
     * @return $this
     */
    public function setExclusionFilters($exclusion_filters)
    {
        $this->container['exclusion_filters'] = $exclusion_filters;

        return $this;
    }

    /**
     * Gets export_url
     * @return \Swagger\Client\Model\BeezUPCommonHttpUrl
     */
    public function getExportUrl()
    {
        return $this->container['export_url'];
    }

    /**
     * Sets export_url
     * @param \Swagger\Client\Model\BeezUPCommonHttpUrl $export_url
     * @return $this
     */
    public function setExportUrl($export_url)
    {
        $this->container['export_url'] = $export_url;

        return $this;
    }

    /**
     * Gets status
     * @return \Swagger\Client\Model\ChannelCatalogStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Swagger\Client\Model\ChannelCatalogStatus $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets links
     * @return \Swagger\Client\Model\BeezUPCommonLink2[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     * @param \Swagger\Client\Model\BeezUPCommonLink2[] $links Indicates the actions you can do on a channel catalog
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


