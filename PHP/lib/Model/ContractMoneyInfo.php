<?php
/**
 * ContractMoneyInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ContractMoneyInfo Class Doc Comment
 *
 * @category    Class
 * @description Describe the pricing information related to the offer.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ContractMoneyInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'contractMoneyInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount' => 'double',
        'amount_excluding_taxes_including_discounts' => 'double',
        'amount_taxes_excluding_discount_including_billing_period_discount' => 'double',
        'amount_including_taxes_excluding_discount_including_billing_period_discount' => 'double',
        'currency_code' => '\Swagger\Client\Model\BeezUPCommonCurrencyCode',
        'vat_percent' => 'double',
        'amount_excluding_taxes_including_discounts_per_month' => 'double',
        'amount_excluding_taxes_and_excluding_discounts' => 'double',
        'amount_taxes_including_discounts' => 'double',
        'amount_including_taxes_including_discounts' => 'double',
        'initial_offer_fixed_price' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount' => 'amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount',
        'amount_excluding_taxes_including_discounts' => 'amountExcludingTaxesIncludingDiscounts',
        'amount_taxes_excluding_discount_including_billing_period_discount' => 'amountTaxesExcludingDiscountIncludingBillingPeriodDiscount',
        'amount_including_taxes_excluding_discount_including_billing_period_discount' => 'amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount',
        'currency_code' => 'currencyCode',
        'vat_percent' => 'vatPercent',
        'amount_excluding_taxes_including_discounts_per_month' => 'amountExcludingTaxesIncludingDiscountsPerMonth',
        'amount_excluding_taxes_and_excluding_discounts' => 'amountExcludingTaxesAndExcludingDiscounts',
        'amount_taxes_including_discounts' => 'amountTaxesIncludingDiscounts',
        'amount_including_taxes_including_discounts' => 'amountIncludingTaxesIncludingDiscounts',
        'initial_offer_fixed_price' => 'initialOfferFixedPrice'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount' => 'setAmountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount',
        'amount_excluding_taxes_including_discounts' => 'setAmountExcludingTaxesIncludingDiscounts',
        'amount_taxes_excluding_discount_including_billing_period_discount' => 'setAmountTaxesExcludingDiscountIncludingBillingPeriodDiscount',
        'amount_including_taxes_excluding_discount_including_billing_period_discount' => 'setAmountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount',
        'currency_code' => 'setCurrencyCode',
        'vat_percent' => 'setVatPercent',
        'amount_excluding_taxes_including_discounts_per_month' => 'setAmountExcludingTaxesIncludingDiscountsPerMonth',
        'amount_excluding_taxes_and_excluding_discounts' => 'setAmountExcludingTaxesAndExcludingDiscounts',
        'amount_taxes_including_discounts' => 'setAmountTaxesIncludingDiscounts',
        'amount_including_taxes_including_discounts' => 'setAmountIncludingTaxesIncludingDiscounts',
        'initial_offer_fixed_price' => 'setInitialOfferFixedPrice'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount' => 'getAmountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount',
        'amount_excluding_taxes_including_discounts' => 'getAmountExcludingTaxesIncludingDiscounts',
        'amount_taxes_excluding_discount_including_billing_period_discount' => 'getAmountTaxesExcludingDiscountIncludingBillingPeriodDiscount',
        'amount_including_taxes_excluding_discount_including_billing_period_discount' => 'getAmountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount',
        'currency_code' => 'getCurrencyCode',
        'vat_percent' => 'getVatPercent',
        'amount_excluding_taxes_including_discounts_per_month' => 'getAmountExcludingTaxesIncludingDiscountsPerMonth',
        'amount_excluding_taxes_and_excluding_discounts' => 'getAmountExcludingTaxesAndExcludingDiscounts',
        'amount_taxes_including_discounts' => 'getAmountTaxesIncludingDiscounts',
        'amount_including_taxes_including_discounts' => 'getAmountIncludingTaxesIncludingDiscounts',
        'initial_offer_fixed_price' => 'getInitialOfferFixedPrice'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount'] = isset($data['amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount']) ? $data['amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount'] : null;
        $this->container['amount_excluding_taxes_including_discounts'] = isset($data['amount_excluding_taxes_including_discounts']) ? $data['amount_excluding_taxes_including_discounts'] : null;
        $this->container['amount_taxes_excluding_discount_including_billing_period_discount'] = isset($data['amount_taxes_excluding_discount_including_billing_period_discount']) ? $data['amount_taxes_excluding_discount_including_billing_period_discount'] : null;
        $this->container['amount_including_taxes_excluding_discount_including_billing_period_discount'] = isset($data['amount_including_taxes_excluding_discount_including_billing_period_discount']) ? $data['amount_including_taxes_excluding_discount_including_billing_period_discount'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['vat_percent'] = isset($data['vat_percent']) ? $data['vat_percent'] : null;
        $this->container['amount_excluding_taxes_including_discounts_per_month'] = isset($data['amount_excluding_taxes_including_discounts_per_month']) ? $data['amount_excluding_taxes_including_discounts_per_month'] : null;
        $this->container['amount_excluding_taxes_and_excluding_discounts'] = isset($data['amount_excluding_taxes_and_excluding_discounts']) ? $data['amount_excluding_taxes_and_excluding_discounts'] : null;
        $this->container['amount_taxes_including_discounts'] = isset($data['amount_taxes_including_discounts']) ? $data['amount_taxes_including_discounts'] : null;
        $this->container['amount_including_taxes_including_discounts'] = isset($data['amount_including_taxes_including_discounts']) ? $data['amount_including_taxes_including_discounts'] : null;
        $this->container['initial_offer_fixed_price'] = isset($data['initial_offer_fixed_price']) ? $data['initial_offer_fixed_price'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount
     * @return double
     */
    public function getAmountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount()
    {
        return $this->container['amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount'];
    }

    /**
     * Sets amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount
     * @param double $amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount The amount excluding taxes and excluding code promo discount including billing period discount.
     * @return $this
     */
    public function setAmountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount($amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount)
    {
        $this->container['amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount'] = $amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount;

        return $this;
    }

    /**
     * Gets amount_excluding_taxes_including_discounts
     * @return double
     */
    public function getAmountExcludingTaxesIncludingDiscounts()
    {
        return $this->container['amount_excluding_taxes_including_discounts'];
    }

    /**
     * Sets amount_excluding_taxes_including_discounts
     * @param double $amount_excluding_taxes_including_discounts The amount excluding taxes including discounts.
     * @return $this
     */
    public function setAmountExcludingTaxesIncludingDiscounts($amount_excluding_taxes_including_discounts)
    {
        $this->container['amount_excluding_taxes_including_discounts'] = $amount_excluding_taxes_including_discounts;

        return $this;
    }

    /**
     * Gets amount_taxes_excluding_discount_including_billing_period_discount
     * @return double
     */
    public function getAmountTaxesExcludingDiscountIncludingBillingPeriodDiscount()
    {
        return $this->container['amount_taxes_excluding_discount_including_billing_period_discount'];
    }

    /**
     * Sets amount_taxes_excluding_discount_including_billing_period_discount
     * @param double $amount_taxes_excluding_discount_including_billing_period_discount The taxes excluding discount including billing period discount.
     * @return $this
     */
    public function setAmountTaxesExcludingDiscountIncludingBillingPeriodDiscount($amount_taxes_excluding_discount_including_billing_period_discount)
    {
        $this->container['amount_taxes_excluding_discount_including_billing_period_discount'] = $amount_taxes_excluding_discount_including_billing_period_discount;

        return $this;
    }

    /**
     * Gets amount_including_taxes_excluding_discount_including_billing_period_discount
     * @return double
     */
    public function getAmountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount()
    {
        return $this->container['amount_including_taxes_excluding_discount_including_billing_period_discount'];
    }

    /**
     * Sets amount_including_taxes_excluding_discount_including_billing_period_discount
     * @param double $amount_including_taxes_excluding_discount_including_billing_period_discount The amount including taxes excluding discount including billing period discount.
     * @return $this
     */
    public function setAmountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount($amount_including_taxes_excluding_discount_including_billing_period_discount)
    {
        $this->container['amount_including_taxes_excluding_discount_including_billing_period_discount'] = $amount_including_taxes_excluding_discount_including_billing_period_discount;

        return $this;
    }

    /**
     * Gets currency_code
     * @return \Swagger\Client\Model\BeezUPCommonCurrencyCode
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param \Swagger\Client\Model\BeezUPCommonCurrencyCode $currency_code
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets vat_percent
     * @return double
     */
    public function getVatPercent()
    {
        return $this->container['vat_percent'];
    }

    /**
     * Sets vat_percent
     * @param double $vat_percent The VAT percent.
     * @return $this
     */
    public function setVatPercent($vat_percent)
    {
        $this->container['vat_percent'] = $vat_percent;

        return $this;
    }

    /**
     * Gets amount_excluding_taxes_including_discounts_per_month
     * @return double
     */
    public function getAmountExcludingTaxesIncludingDiscountsPerMonth()
    {
        return $this->container['amount_excluding_taxes_including_discounts_per_month'];
    }

    /**
     * Sets amount_excluding_taxes_including_discounts_per_month
     * @param double $amount_excluding_taxes_including_discounts_per_month The amount excluding taxes including discounts per month.
     * @return $this
     */
    public function setAmountExcludingTaxesIncludingDiscountsPerMonth($amount_excluding_taxes_including_discounts_per_month)
    {
        $this->container['amount_excluding_taxes_including_discounts_per_month'] = $amount_excluding_taxes_including_discounts_per_month;

        return $this;
    }

    /**
     * Gets amount_excluding_taxes_and_excluding_discounts
     * @return double
     */
    public function getAmountExcludingTaxesAndExcludingDiscounts()
    {
        return $this->container['amount_excluding_taxes_and_excluding_discounts'];
    }

    /**
     * Sets amount_excluding_taxes_and_excluding_discounts
     * @param double $amount_excluding_taxes_and_excluding_discounts The amount excluding taxes and excluding discounts.
     * @return $this
     */
    public function setAmountExcludingTaxesAndExcludingDiscounts($amount_excluding_taxes_and_excluding_discounts)
    {
        $this->container['amount_excluding_taxes_and_excluding_discounts'] = $amount_excluding_taxes_and_excluding_discounts;

        return $this;
    }

    /**
     * Gets amount_taxes_including_discounts
     * @return double
     */
    public function getAmountTaxesIncludingDiscounts()
    {
        return $this->container['amount_taxes_including_discounts'];
    }

    /**
     * Sets amount_taxes_including_discounts
     * @param double $amount_taxes_including_discounts Taxes including discounts.
     * @return $this
     */
    public function setAmountTaxesIncludingDiscounts($amount_taxes_including_discounts)
    {
        $this->container['amount_taxes_including_discounts'] = $amount_taxes_including_discounts;

        return $this;
    }

    /**
     * Gets amount_including_taxes_including_discounts
     * @return double
     */
    public function getAmountIncludingTaxesIncludingDiscounts()
    {
        return $this->container['amount_including_taxes_including_discounts'];
    }

    /**
     * Sets amount_including_taxes_including_discounts
     * @param double $amount_including_taxes_including_discounts The amount including taxes including discounts.
     * @return $this
     */
    public function setAmountIncludingTaxesIncludingDiscounts($amount_including_taxes_including_discounts)
    {
        $this->container['amount_including_taxes_including_discounts'] = $amount_including_taxes_including_discounts;

        return $this;
    }

    /**
     * Gets initial_offer_fixed_price
     * @return double
     */
    public function getInitialOfferFixedPrice()
    {
        return $this->container['initial_offer_fixed_price'];
    }

    /**
     * Sets initial_offer_fixed_price
     * @param double $initial_offer_fixed_price The initial offer fixed price.
     * @return $this
     */
    public function setInitialOfferFixedPrice($initial_offer_fixed_price)
    {
        $this->container['initial_offer_fixed_price'] = $initial_offer_fixed_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


