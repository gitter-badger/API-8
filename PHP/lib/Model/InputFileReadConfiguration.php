<?php
/**
 * InputFileReadConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InputFileReadConfiguration Class Doc Comment
 *
 * @category    Class
 * @description Describe how to read the file. If FileFormatStrategy is CSV, csvFileReadProperties is required. Otherwise the xmlFileReadProperties is required.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InputFileReadConfiguration implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inputFileReadConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'format' => '\Swagger\Client\Model\FileFormatStrategy',
        'encoding_type_name' => 'string',
        'culture_name' => 'string',
        'csv_file_read_properties' => '\Swagger\Client\Model\InputFileReadCsvConfiguration',
        'xml_file_read_properties' => '\Swagger\Client\Model\InputFileReadXmlConfiguration'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'format' => 'format',
        'encoding_type_name' => 'encodingTypeName',
        'culture_name' => 'cultureName',
        'csv_file_read_properties' => 'csvFileReadProperties',
        'xml_file_read_properties' => 'xmlFileReadProperties'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'format' => 'setFormat',
        'encoding_type_name' => 'setEncodingTypeName',
        'culture_name' => 'setCultureName',
        'csv_file_read_properties' => 'setCsvFileReadProperties',
        'xml_file_read_properties' => 'setXmlFileReadProperties'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'format' => 'getFormat',
        'encoding_type_name' => 'getEncodingTypeName',
        'culture_name' => 'getCultureName',
        'csv_file_read_properties' => 'getCsvFileReadProperties',
        'xml_file_read_properties' => 'getXmlFileReadProperties'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['encoding_type_name'] = isset($data['encoding_type_name']) ? $data['encoding_type_name'] : 'UTF-8';
        $this->container['culture_name'] = isset($data['culture_name']) ? $data['culture_name'] : '';
        $this->container['csv_file_read_properties'] = isset($data['csv_file_read_properties']) ? $data['csv_file_read_properties'] : null;
        $this->container['xml_file_read_properties'] = isset($data['xml_file_read_properties']) ? $data['xml_file_read_properties'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['format'] === null) {
            $invalid_properties[] = "'format' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['format'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets format
     * @return \Swagger\Client\Model\FileFormatStrategy
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     * @param \Swagger\Client\Model\FileFormatStrategy $format
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets encoding_type_name
     * @return string
     */
    public function getEncodingTypeName()
    {
        return $this->container['encoding_type_name'];
    }

    /**
     * Sets encoding_type_name
     * @param string $encoding_type_name The encoding type. UTF-8 by default.
     * @return $this
     */
    public function setEncodingTypeName($encoding_type_name)
    {
        $this->container['encoding_type_name'] = $encoding_type_name;

        return $this;
    }

    /**
     * Gets culture_name
     * @return string
     */
    public function getCultureName()
    {
        return $this->container['culture_name'];
    }

    /**
     * Sets culture_name
     * @param string $culture_name The culture name of the file.  (i.e. fr-FR). If null then Invariant culture will be used.
     * @return $this
     */
    public function setCultureName($culture_name)
    {
        $this->container['culture_name'] = $culture_name;

        return $this;
    }

    /**
     * Gets csv_file_read_properties
     * @return \Swagger\Client\Model\InputFileReadCsvConfiguration
     */
    public function getCsvFileReadProperties()
    {
        return $this->container['csv_file_read_properties'];
    }

    /**
     * Sets csv_file_read_properties
     * @param \Swagger\Client\Model\InputFileReadCsvConfiguration $csv_file_read_properties
     * @return $this
     */
    public function setCsvFileReadProperties($csv_file_read_properties)
    {
        $this->container['csv_file_read_properties'] = $csv_file_read_properties;

        return $this;
    }

    /**
     * Gets xml_file_read_properties
     * @return \Swagger\Client\Model\InputFileReadXmlConfiguration
     */
    public function getXmlFileReadProperties()
    {
        return $this->container['xml_file_read_properties'];
    }

    /**
     * Sets xml_file_read_properties
     * @param \Swagger\Client\Model\InputFileReadXmlConfiguration $xml_file_read_properties
     * @return $this
     */
    public function setXmlFileReadProperties($xml_file_read_properties)
    {
        $this->container['xml_file_read_properties'] = $xml_file_read_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


