<?php
/**
 * ChannelCatalogMarketplaceProperty
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ChannelCatalogMarketplaceProperty Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelCatalogMarketplaceProperty implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'channelCatalogMarketplaceProperty';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'values' => 'string[]',
        'info' => '\Swagger\Client\Model\BeezUPCommonInfoSummaries',
        'default' => 'string[]',
        'description' => 'string',
        'position' => 'int',
        'read_only' => 'bool',
        'min_length' => 'int',
        'max_length' => 'int',
        'min_items' => 'int',
        'max_items' => 'int',
        'lov_link' => '\Swagger\Client\Model\BeezUPCommonLOVLink2',
        'lov_required' => 'bool',
        'required' => 'bool',
        'offer_id_required' => 'int',
        'visible' => 'bool',
        'type' => '\Swagger\Client\Model\Type',
        'pattern' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'values' => 'values',
        'info' => 'info',
        'default' => 'default',
        'description' => 'description',
        'position' => 'position',
        'read_only' => 'readOnly',
        'min_length' => 'minLength',
        'max_length' => 'maxLength',
        'min_items' => 'minItems',
        'max_items' => 'maxItems',
        'lov_link' => 'lovLink',
        'lov_required' => 'lovRequired',
        'required' => 'required',
        'offer_id_required' => 'offerIdRequired',
        'visible' => 'visible',
        'type' => 'type',
        'pattern' => 'pattern'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'values' => 'setValues',
        'info' => 'setInfo',
        'default' => 'setDefault',
        'description' => 'setDescription',
        'position' => 'setPosition',
        'read_only' => 'setReadOnly',
        'min_length' => 'setMinLength',
        'max_length' => 'setMaxLength',
        'min_items' => 'setMinItems',
        'max_items' => 'setMaxItems',
        'lov_link' => 'setLovLink',
        'lov_required' => 'setLovRequired',
        'required' => 'setRequired',
        'offer_id_required' => 'setOfferIdRequired',
        'visible' => 'setVisible',
        'type' => 'setType',
        'pattern' => 'setPattern'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'values' => 'getValues',
        'info' => 'getInfo',
        'default' => 'getDefault',
        'description' => 'getDescription',
        'position' => 'getPosition',
        'read_only' => 'getReadOnly',
        'min_length' => 'getMinLength',
        'max_length' => 'getMaxLength',
        'min_items' => 'getMinItems',
        'max_items' => 'getMaxItems',
        'lov_link' => 'getLovLink',
        'lov_required' => 'getLovRequired',
        'required' => 'getRequired',
        'offer_id_required' => 'getOfferIdRequired',
        'visible' => 'getVisible',
        'type' => 'getType',
        'pattern' => 'getPattern'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
        $this->container['info'] = isset($data['info']) ? $data['info'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : false;
        $this->container['min_length'] = isset($data['min_length']) ? $data['min_length'] : 0;
        $this->container['max_length'] = isset($data['max_length']) ? $data['max_length'] : null;
        $this->container['min_items'] = isset($data['min_items']) ? $data['min_items'] : 1;
        $this->container['max_items'] = isset($data['max_items']) ? $data['max_items'] : 1;
        $this->container['lov_link'] = isset($data['lov_link']) ? $data['lov_link'] : null;
        $this->container['lov_required'] = isset($data['lov_required']) ? $data['lov_required'] : false;
        $this->container['required'] = isset($data['required']) ? $data['required'] : false;
        $this->container['offer_id_required'] = isset($data['offer_id_required']) ? $data['offer_id_required'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : true;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['pattern'] = isset($data['pattern']) ? $data['pattern'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['position'] === null) {
            $invalid_properties[] = "'position' can't be null";
        }
        if (($this->container['position'] < 1)) {
            $invalid_properties[] = "invalid value for 'position', must be bigger than or equal to 1.";
        }

        if ($this->container['read_only'] === null) {
            $invalid_properties[] = "'read_only' can't be null";
        }
        if (!is_null($this->container['min_length']) && ($this->container['min_length'] < 0)) {
            $invalid_properties[] = "invalid value for 'min_length', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_length']) && ($this->container['max_length'] < 1)) {
            $invalid_properties[] = "invalid value for 'max_length', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['min_items']) && ($this->container['min_items'] < 0)) {
            $invalid_properties[] = "invalid value for 'min_items', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_items']) && ($this->container['max_items'] < 1)) {
            $invalid_properties[] = "invalid value for 'max_items', must be bigger than or equal to 1.";
        }

        if ($this->container['required'] === null) {
            $invalid_properties[] = "'required' can't be null";
        }
        if ($this->container['visible'] === null) {
            $invalid_properties[] = "'visible' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['position'] === null) {
            return false;
        }
        if ($this->container['position'] < 1) {
            return false;
        }
        if ($this->container['read_only'] === null) {
            return false;
        }
        if ($this->container['min_length'] < 0) {
            return false;
        }
        if ($this->container['max_length'] < 1) {
            return false;
        }
        if ($this->container['min_items'] < 0) {
            return false;
        }
        if ($this->container['max_items'] < 1) {
            return false;
        }
        if ($this->container['required'] === null) {
            return false;
        }
        if ($this->container['visible'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Channel catalog marketplace property name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets values
     * @return string[]
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     * @param string[] $values Channel catalog marketplace property values
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets info
     * @return \Swagger\Client\Model\BeezUPCommonInfoSummaries
     */
    public function getInfo()
    {
        return $this->container['info'];
    }

    /**
     * Sets info
     * @param \Swagger\Client\Model\BeezUPCommonInfoSummaries $info
     * @return $this
     */
    public function setInfo($info)
    {
        $this->container['info'] = $info;

        return $this;
    }

    /**
     * Gets default
     * @return string[]
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     * @param string[] $default Indicate the default values of the property
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Indicate the description of the property
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets position
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     * @param int $position Indicate the position of the property in the display group
     * @return $this
     */
    public function setPosition($position)
    {

        if (($position < 1)) {
            throw new \InvalidArgumentException('invalid value for $position when calling ChannelCatalogMarketplaceProperty., must be bigger than or equal to 1.');
        }

        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets read_only
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     * @param bool $read_only Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed.
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets min_length
     * @return int
     */
    public function getMinLength()
    {
        return $this->container['min_length'];
    }

    /**
     * Sets min_length
     * @param int $min_length Indicates the minimum size of the property value
     * @return $this
     */
    public function setMinLength($min_length)
    {

        if (!is_null($min_length) && ($min_length < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_length when calling ChannelCatalogMarketplaceProperty., must be bigger than or equal to 0.');
        }

        $this->container['min_length'] = $min_length;

        return $this;
    }

    /**
     * Gets max_length
     * @return int
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     * @param int $max_length Indicates the maximum size of the property value
     * @return $this
     */
    public function setMaxLength($max_length)
    {

        if (!is_null($max_length) && ($max_length < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_length when calling ChannelCatalogMarketplaceProperty., must be bigger than or equal to 1.');
        }

        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets min_items
     * @return int
     */
    public function getMinItems()
    {
        return $this->container['min_items'];
    }

    /**
     * Sets min_items
     * @param int $min_items Indicates the minimum item count of the property value.
     * @return $this
     */
    public function setMinItems($min_items)
    {

        if (!is_null($min_items) && ($min_items < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_items when calling ChannelCatalogMarketplaceProperty., must be bigger than or equal to 0.');
        }

        $this->container['min_items'] = $min_items;

        return $this;
    }

    /**
     * Gets max_items
     * @return int
     */
    public function getMaxItems()
    {
        return $this->container['max_items'];
    }

    /**
     * Sets max_items
     * @param int $max_items Indicates the maximum item count of the property value
     * @return $this
     */
    public function setMaxItems($max_items)
    {

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for $max_items when calling ChannelCatalogMarketplaceProperty., must be bigger than or equal to 1.');
        }

        $this->container['max_items'] = $max_items;

        return $this;
    }

    /**
     * Gets lov_link
     * @return \Swagger\Client\Model\BeezUPCommonLOVLink2
     */
    public function getLovLink()
    {
        return $this->container['lov_link'];
    }

    /**
     * Sets lov_link
     * @param \Swagger\Client\Model\BeezUPCommonLOVLink2 $lov_link
     * @return $this
     */
    public function setLovLink($lov_link)
    {
        $this->container['lov_link'] = $lov_link;

        return $this;
    }

    /**
     * Gets lov_required
     * @return bool
     */
    public function getLovRequired()
    {
        return $this->container['lov_required'];
    }

    /**
     * Sets lov_required
     * @param bool $lov_required Indicates if the property value must be in the list of value.
     * @return $this
     */
    public function setLovRequired($lov_required)
    {
        $this->container['lov_required'] = $lov_required;

        return $this;
    }

    /**
     * Gets required
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     * @param bool $required Indicate if the property is required or not
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets offer_id_required
     * @return int
     */
    public function getOfferIdRequired()
    {
        return $this->container['offer_id_required'];
    }

    /**
     * Sets offer_id_required
     * @param int $offer_id_required Indicates the offer identifier required to configure this property.
     * @return $this
     */
    public function setOfferIdRequired($offer_id_required)
    {
        $this->container['offer_id_required'] = $offer_id_required;

        return $this;
    }

    /**
     * Gets visible
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     * @param bool $visible Indicates if this property should be displayed in the configuration page.
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets type
     * @return \Swagger\Client\Model\Type
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Swagger\Client\Model\Type $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pattern
     * @return string
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     * @param string $pattern Channel catalog marketplace setting value format validation regular expression
     * @return $this
     */
    public function setPattern($pattern)
    {
        $this->container['pattern'] = $pattern;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


