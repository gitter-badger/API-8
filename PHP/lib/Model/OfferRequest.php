<?php
/**
 * OfferRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OfferRequest Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OfferRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'offerRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offer_id' => '\Swagger\Client\Model\OfferId',
        'store_count' => '\Swagger\Client\Model\StoreCount',
        'coupon_discount_code' => '\Swagger\Client\Model\CouponDiscountCode',
        'coupon_offer_code' => '\Swagger\Client\Model\CouponOfferCode',
        'billing_period_in_month' => '\Swagger\Client\Model\BillingPeriodInMonth'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'offer_id' => 'offerId',
        'store_count' => 'storeCount',
        'coupon_discount_code' => 'couponDiscountCode',
        'coupon_offer_code' => 'couponOfferCode',
        'billing_period_in_month' => 'billingPeriodInMonth'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'offer_id' => 'setOfferId',
        'store_count' => 'setStoreCount',
        'coupon_discount_code' => 'setCouponDiscountCode',
        'coupon_offer_code' => 'setCouponOfferCode',
        'billing_period_in_month' => 'setBillingPeriodInMonth'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'offer_id' => 'getOfferId',
        'store_count' => 'getStoreCount',
        'coupon_discount_code' => 'getCouponDiscountCode',
        'coupon_offer_code' => 'getCouponOfferCode',
        'billing_period_in_month' => 'getBillingPeriodInMonth'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['store_count'] = isset($data['store_count']) ? $data['store_count'] : null;
        $this->container['coupon_discount_code'] = isset($data['coupon_discount_code']) ? $data['coupon_discount_code'] : null;
        $this->container['coupon_offer_code'] = isset($data['coupon_offer_code']) ? $data['coupon_offer_code'] : null;
        $this->container['billing_period_in_month'] = isset($data['billing_period_in_month']) ? $data['billing_period_in_month'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['offer_id'] === null) {
            $invalid_properties[] = "'offer_id' can't be null";
        }
        if ($this->container['store_count'] === null) {
            $invalid_properties[] = "'store_count' can't be null";
        }
        if ($this->container['billing_period_in_month'] === null) {
            $invalid_properties[] = "'billing_period_in_month' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['offer_id'] === null) {
            return false;
        }
        if ($this->container['store_count'] === null) {
            return false;
        }
        if ($this->container['billing_period_in_month'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets offer_id
     * @return \Swagger\Client\Model\OfferId
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     * @param \Swagger\Client\Model\OfferId $offer_id
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets store_count
     * @return \Swagger\Client\Model\StoreCount
     */
    public function getStoreCount()
    {
        return $this->container['store_count'];
    }

    /**
     * Sets store_count
     * @param \Swagger\Client\Model\StoreCount $store_count
     * @return $this
     */
    public function setStoreCount($store_count)
    {
        $this->container['store_count'] = $store_count;

        return $this;
    }

    /**
     * Gets coupon_discount_code
     * @return \Swagger\Client\Model\CouponDiscountCode
     */
    public function getCouponDiscountCode()
    {
        return $this->container['coupon_discount_code'];
    }

    /**
     * Sets coupon_discount_code
     * @param \Swagger\Client\Model\CouponDiscountCode $coupon_discount_code
     * @return $this
     */
    public function setCouponDiscountCode($coupon_discount_code)
    {
        $this->container['coupon_discount_code'] = $coupon_discount_code;

        return $this;
    }

    /**
     * Gets coupon_offer_code
     * @return \Swagger\Client\Model\CouponOfferCode
     */
    public function getCouponOfferCode()
    {
        return $this->container['coupon_offer_code'];
    }

    /**
     * Sets coupon_offer_code
     * @param \Swagger\Client\Model\CouponOfferCode $coupon_offer_code
     * @return $this
     */
    public function setCouponOfferCode($coupon_offer_code)
    {
        $this->container['coupon_offer_code'] = $coupon_offer_code;

        return $this;
    }

    /**
     * Gets billing_period_in_month
     * @return \Swagger\Client\Model\BillingPeriodInMonth
     */
    public function getBillingPeriodInMonth()
    {
        return $this->container['billing_period_in_month'];
    }

    /**
     * Sets billing_period_in_month
     * @param \Swagger\Client\Model\BillingPeriodInMonth $billing_period_in_month
     * @return $this
     */
    public function setBillingPeriodInMonth($billing_period_in_month)
    {
        $this->container['billing_period_in_month'] = $billing_period_in_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


