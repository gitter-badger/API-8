<?php
/**
 * ImportationReporting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ImportationReporting Class Doc Comment
 *
 * @category    Class
 * @description The catalog importation reporting
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ImportationReporting implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'importationReporting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'step_name' => 'string',
        'user_id' => '\Swagger\Client\Model\BeezUPCommonUserId',
        'success' => 'bool',
        'total_product_count' => 'int',
        'total_product_error_count' => 'int',
        'total_product_success_count' => 'int',
        'errors' => '\Swagger\Client\Model\BeezUPCommonUserErrorMessage[]',
        'last_update_utc_date' => '\DateTime',
        'auto_imported' => 'bool',
        'begin_utc_date' => '\DateTime',
        'end_utc_date' => '\DateTime',
        'input_configuration_url' => 'string',
        'steps' => 'map[string,bool]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'step_name' => 'stepName',
        'user_id' => 'userId',
        'success' => 'success',
        'total_product_count' => 'totalProductCount',
        'total_product_error_count' => 'totalProductErrorCount',
        'total_product_success_count' => 'totalProductSuccessCount',
        'errors' => 'errors',
        'last_update_utc_date' => 'lastUpdateUtcDate',
        'auto_imported' => 'autoImported',
        'begin_utc_date' => 'beginUtcDate',
        'end_utc_date' => 'endUtcDate',
        'input_configuration_url' => 'inputConfigurationUrl',
        'steps' => 'steps'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'step_name' => 'setStepName',
        'user_id' => 'setUserId',
        'success' => 'setSuccess',
        'total_product_count' => 'setTotalProductCount',
        'total_product_error_count' => 'setTotalProductErrorCount',
        'total_product_success_count' => 'setTotalProductSuccessCount',
        'errors' => 'setErrors',
        'last_update_utc_date' => 'setLastUpdateUtcDate',
        'auto_imported' => 'setAutoImported',
        'begin_utc_date' => 'setBeginUtcDate',
        'end_utc_date' => 'setEndUtcDate',
        'input_configuration_url' => 'setInputConfigurationUrl',
        'steps' => 'setSteps'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'step_name' => 'getStepName',
        'user_id' => 'getUserId',
        'success' => 'getSuccess',
        'total_product_count' => 'getTotalProductCount',
        'total_product_error_count' => 'getTotalProductErrorCount',
        'total_product_success_count' => 'getTotalProductSuccessCount',
        'errors' => 'getErrors',
        'last_update_utc_date' => 'getLastUpdateUtcDate',
        'auto_imported' => 'getAutoImported',
        'begin_utc_date' => 'getBeginUtcDate',
        'end_utc_date' => 'getEndUtcDate',
        'input_configuration_url' => 'getInputConfigurationUrl',
        'steps' => 'getSteps'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['step_name'] = isset($data['step_name']) ? $data['step_name'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['total_product_count'] = isset($data['total_product_count']) ? $data['total_product_count'] : null;
        $this->container['total_product_error_count'] = isset($data['total_product_error_count']) ? $data['total_product_error_count'] : null;
        $this->container['total_product_success_count'] = isset($data['total_product_success_count']) ? $data['total_product_success_count'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['last_update_utc_date'] = isset($data['last_update_utc_date']) ? $data['last_update_utc_date'] : null;
        $this->container['auto_imported'] = isset($data['auto_imported']) ? $data['auto_imported'] : null;
        $this->container['begin_utc_date'] = isset($data['begin_utc_date']) ? $data['begin_utc_date'] : null;
        $this->container['end_utc_date'] = isset($data['end_utc_date']) ? $data['end_utc_date'] : null;
        $this->container['input_configuration_url'] = isset($data['input_configuration_url']) ? $data['input_configuration_url'] : null;
        $this->container['steps'] = isset($data['steps']) ? $data['steps'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['last_update_utc_date'] === null) {
            $invalid_properties[] = "'last_update_utc_date' can't be null";
        }
        if ($this->container['begin_utc_date'] === null) {
            $invalid_properties[] = "'begin_utc_date' can't be null";
        }
        if ($this->container['steps'] === null) {
            $invalid_properties[] = "'steps' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['last_update_utc_date'] === null) {
            return false;
        }
        if ($this->container['begin_utc_date'] === null) {
            return false;
        }
        if ($this->container['steps'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets step_name
     * @return string
     */
    public function getStepName()
    {
        return $this->container['step_name'];
    }

    /**
     * Sets step_name
     * @param string $step_name The last step name of the importation process
     * @return $this
     */
    public function setStepName($step_name)
    {
        $this->container['step_name'] = $step_name;

        return $this;
    }

    /**
     * Gets user_id
     * @return \Swagger\Client\Model\BeezUPCommonUserId
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param \Swagger\Client\Model\BeezUPCommonUserId $user_id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets success
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     * @param bool $success Indicate if the importation succeed or not.
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets total_product_count
     * @return int
     */
    public function getTotalProductCount()
    {
        return $this->container['total_product_count'];
    }

    /**
     * Sets total_product_count
     * @param int $total_product_count Indicate the total product count detected in the catalog during the importation.
     * @return $this
     */
    public function setTotalProductCount($total_product_count)
    {
        $this->container['total_product_count'] = $total_product_count;

        return $this;
    }

    /**
     * Gets total_product_error_count
     * @return int
     */
    public function getTotalProductErrorCount()
    {
        return $this->container['total_product_error_count'];
    }

    /**
     * Sets total_product_error_count
     * @param int $total_product_error_count Indicate the total product count in error detected in the catalog during the importation.
     * @return $this
     */
    public function setTotalProductErrorCount($total_product_error_count)
    {
        $this->container['total_product_error_count'] = $total_product_error_count;

        return $this;
    }

    /**
     * Gets total_product_success_count
     * @return int
     */
    public function getTotalProductSuccessCount()
    {
        return $this->container['total_product_success_count'];
    }

    /**
     * Sets total_product_success_count
     * @param int $total_product_success_count Indicate the total product count in success in the catalog during the importation.
     * @return $this
     */
    public function setTotalProductSuccessCount($total_product_success_count)
    {
        $this->container['total_product_success_count'] = $total_product_success_count;

        return $this;
    }

    /**
     * Gets errors
     * @return \Swagger\Client\Model\BeezUPCommonUserErrorMessage[]
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     * @param \Swagger\Client\Model\BeezUPCommonUserErrorMessage[] $errors Indicate the error message list related to this importation.
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets last_update_utc_date
     * @return \DateTime
     */
    public function getLastUpdateUtcDate()
    {
        return $this->container['last_update_utc_date'];
    }

    /**
     * Sets last_update_utc_date
     * @param \DateTime $last_update_utc_date Indicate the last update UTC date of the reporting.
     * @return $this
     */
    public function setLastUpdateUtcDate($last_update_utc_date)
    {
        $this->container['last_update_utc_date'] = $last_update_utc_date;

        return $this;
    }

    /**
     * Gets auto_imported
     * @return bool
     */
    public function getAutoImported()
    {
        return $this->container['auto_imported'];
    }

    /**
     * Sets auto_imported
     * @param bool $auto_imported Indicate if this importation is an auto import or not.
     * @return $this
     */
    public function setAutoImported($auto_imported)
    {
        $this->container['auto_imported'] = $auto_imported;

        return $this;
    }

    /**
     * Gets begin_utc_date
     * @return \DateTime
     */
    public function getBeginUtcDate()
    {
        return $this->container['begin_utc_date'];
    }

    /**
     * Sets begin_utc_date
     * @param \DateTime $begin_utc_date Indicate the begin UTC date of this importation.
     * @return $this
     */
    public function setBeginUtcDate($begin_utc_date)
    {
        $this->container['begin_utc_date'] = $begin_utc_date;

        return $this;
    }

    /**
     * Gets end_utc_date
     * @return \DateTime
     */
    public function getEndUtcDate()
    {
        return $this->container['end_utc_date'];
    }

    /**
     * Sets end_utc_date
     * @param \DateTime $end_utc_date Indicate the end UTC date of this importation.
     * @return $this
     */
    public function setEndUtcDate($end_utc_date)
    {
        $this->container['end_utc_date'] = $end_utc_date;

        return $this;
    }

    /**
     * Gets input_configuration_url
     * @return string
     */
    public function getInputConfigurationUrl()
    {
        return $this->container['input_configuration_url'];
    }

    /**
     * Sets input_configuration_url
     * @param string $input_configuration_url Indicate the input url of this importation.
     * @return $this
     */
    public function setInputConfigurationUrl($input_configuration_url)
    {
        $this->container['input_configuration_url'] = $input_configuration_url;

        return $this;
    }

    /**
     * Gets steps
     * @return map[string,bool]
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     * @param map[string,bool] $steps Indicate the steps that have been passed during the importation process
     * @return $this
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


