<?php
/**
 * StoreTrackingStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * StoreTrackingStatus Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StoreTrackingStatus implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'storeTrackingStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'click_synchronization_utc_date' => '\DateTime',
        'order_synchonization_utc_date' => '\DateTime',
        'marketplace_order_synchonization_utc_date' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'click_synchronization_utc_date' => 'clickSynchronizationUtcDate',
        'order_synchonization_utc_date' => 'orderSynchonizationUtcDate',
        'marketplace_order_synchonization_utc_date' => 'marketplaceOrderSynchonizationUtcDate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'click_synchronization_utc_date' => 'setClickSynchronizationUtcDate',
        'order_synchonization_utc_date' => 'setOrderSynchonizationUtcDate',
        'marketplace_order_synchonization_utc_date' => 'setMarketplaceOrderSynchonizationUtcDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'click_synchronization_utc_date' => 'getClickSynchronizationUtcDate',
        'order_synchonization_utc_date' => 'getOrderSynchonizationUtcDate',
        'marketplace_order_synchonization_utc_date' => 'getMarketplaceOrderSynchonizationUtcDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['click_synchronization_utc_date'] = isset($data['click_synchronization_utc_date']) ? $data['click_synchronization_utc_date'] : null;
        $this->container['order_synchonization_utc_date'] = isset($data['order_synchonization_utc_date']) ? $data['order_synchonization_utc_date'] : null;
        $this->container['marketplace_order_synchonization_utc_date'] = isset($data['marketplace_order_synchonization_utc_date']) ? $data['marketplace_order_synchonization_utc_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets click_synchronization_utc_date
     * @return \DateTime
     */
    public function getClickSynchronizationUtcDate()
    {
        return $this->container['click_synchronization_utc_date'];
    }

    /**
     * Sets click_synchronization_utc_date
     * @param \DateTime $click_synchronization_utc_date The utc date of the latest click synchronized
     * @return $this
     */
    public function setClickSynchronizationUtcDate($click_synchronization_utc_date)
    {
        $this->container['click_synchronization_utc_date'] = $click_synchronization_utc_date;

        return $this;
    }

    /**
     * Gets order_synchonization_utc_date
     * @return \DateTime
     */
    public function getOrderSynchonizationUtcDate()
    {
        return $this->container['order_synchonization_utc_date'];
    }

    /**
     * Sets order_synchonization_utc_date
     * @param \DateTime $order_synchonization_utc_date The utc date of the latest order synchronized
     * @return $this
     */
    public function setOrderSynchonizationUtcDate($order_synchonization_utc_date)
    {
        $this->container['order_synchonization_utc_date'] = $order_synchonization_utc_date;

        return $this;
    }

    /**
     * Gets marketplace_order_synchonization_utc_date
     * @return \DateTime
     */
    public function getMarketplaceOrderSynchonizationUtcDate()
    {
        return $this->container['marketplace_order_synchonization_utc_date'];
    }

    /**
     * Sets marketplace_order_synchonization_utc_date
     * @param \DateTime $marketplace_order_synchonization_utc_date The utc date of the latest marketplace order synchronized
     * @return $this
     */
    public function setMarketplaceOrderSynchonizationUtcDate($marketplace_order_synchonization_utc_date)
    {
        $this->container['marketplace_order_synchonization_utc_date'] = $marketplace_order_synchonization_utc_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


