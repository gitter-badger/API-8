<?php
/**
 * InputFileConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InputFileConfiguration Class Doc Comment
 *
 * @category    Class
 * @description Describe how to get and read a file
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InputFileConfiguration implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inputFileConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file_number' => 'int',
        'fetch' => '\Swagger\Client\Model\InputFileFetchConfiguration',
        'read' => '\Swagger\Client\Model\InputFileReadConfiguration'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'file_number' => 'fileNumber',
        'fetch' => 'fetch',
        'read' => 'read'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'file_number' => 'setFileNumber',
        'fetch' => 'setFetch',
        'read' => 'setRead'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'file_number' => 'getFileNumber',
        'fetch' => 'getFetch',
        'read' => 'getRead'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_number'] = isset($data['file_number']) ? $data['file_number'] : null;
        $this->container['fetch'] = isset($data['fetch']) ? $data['fetch'] : null;
        $this->container['read'] = isset($data['read']) ? $data['read'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['file_number'] === null) {
            $invalid_properties[] = "'file_number' can't be null";
        }
        if (($this->container['file_number'] < 1)) {
            $invalid_properties[] = "invalid value for 'file_number', must be bigger than or equal to 1.";
        }

        if ($this->container['fetch'] === null) {
            $invalid_properties[] = "'fetch' can't be null";
        }
        if ($this->container['read'] === null) {
            $invalid_properties[] = "'read' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['file_number'] === null) {
            return false;
        }
        if ($this->container['file_number'] < 1) {
            return false;
        }
        if ($this->container['fetch'] === null) {
            return false;
        }
        if ($this->container['read'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets file_number
     * @return int
     */
    public function getFileNumber()
    {
        return $this->container['file_number'];
    }

    /**
     * Sets file_number
     * @param int $file_number The file number starting by 1
     * @return $this
     */
    public function setFileNumber($file_number)
    {

        if (($file_number < 1)) {
            throw new \InvalidArgumentException('invalid value for $file_number when calling InputFileConfiguration., must be bigger than or equal to 1.');
        }

        $this->container['file_number'] = $file_number;

        return $this;
    }

    /**
     * Gets fetch
     * @return \Swagger\Client\Model\InputFileFetchConfiguration
     */
    public function getFetch()
    {
        return $this->container['fetch'];
    }

    /**
     * Sets fetch
     * @param \Swagger\Client\Model\InputFileFetchConfiguration $fetch
     * @return $this
     */
    public function setFetch($fetch)
    {
        $this->container['fetch'] = $fetch;

        return $this;
    }

    /**
     * Gets read
     * @return \Swagger\Client\Model\InputFileReadConfiguration
     */
    public function getRead()
    {
        return $this->container['read'];
    }

    /**
     * Sets read
     * @param \Swagger\Client\Model\InputFileReadConfiguration $read
     * @return $this
     */
    public function setRead($read)
    {
        $this->container['read'] = $read;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


