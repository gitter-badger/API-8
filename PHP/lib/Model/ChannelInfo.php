<?php
/**
 * ChannelInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ChannelInfo Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'channelInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel_id' => '\Swagger\Client\Model\BeezUPCommonChannelId',
        'channel_name' => '\Swagger\Client\Model\BeezUPCommonChannelName',
        'channel_logo_url' => '\Swagger\Client\Model\BeezUPCommonHttpUrl',
        'channel_description' => 'string',
        'beez_up_offer' => 'string',
        'sales_contact' => '\Swagger\Client\Model\ChannelInfoSalesContact',
        'details' => '\Swagger\Client\Model\ChannelInfoDetails',
        'key_numbers' => '\Swagger\Client\Model\ChannelInfoKeyNumbers',
        'technical_contact' => '\Swagger\Client\Model\ChannelInfoTechnicalContact'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_id' => 'channelId',
        'channel_name' => 'channelName',
        'channel_logo_url' => 'channelLogoUrl',
        'channel_description' => 'channelDescription',
        'beez_up_offer' => 'beezUPOffer',
        'sales_contact' => 'salesContact',
        'details' => 'details',
        'key_numbers' => 'keyNumbers',
        'technical_contact' => 'technicalContact'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'channel_id' => 'setChannelId',
        'channel_name' => 'setChannelName',
        'channel_logo_url' => 'setChannelLogoUrl',
        'channel_description' => 'setChannelDescription',
        'beez_up_offer' => 'setBeezUpOffer',
        'sales_contact' => 'setSalesContact',
        'details' => 'setDetails',
        'key_numbers' => 'setKeyNumbers',
        'technical_contact' => 'setTechnicalContact'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'channel_id' => 'getChannelId',
        'channel_name' => 'getChannelName',
        'channel_logo_url' => 'getChannelLogoUrl',
        'channel_description' => 'getChannelDescription',
        'beez_up_offer' => 'getBeezUpOffer',
        'sales_contact' => 'getSalesContact',
        'details' => 'getDetails',
        'key_numbers' => 'getKeyNumbers',
        'technical_contact' => 'getTechnicalContact'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['channel_name'] = isset($data['channel_name']) ? $data['channel_name'] : null;
        $this->container['channel_logo_url'] = isset($data['channel_logo_url']) ? $data['channel_logo_url'] : null;
        $this->container['channel_description'] = isset($data['channel_description']) ? $data['channel_description'] : null;
        $this->container['beez_up_offer'] = isset($data['beez_up_offer']) ? $data['beez_up_offer'] : null;
        $this->container['sales_contact'] = isset($data['sales_contact']) ? $data['sales_contact'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['key_numbers'] = isset($data['key_numbers']) ? $data['key_numbers'] : null;
        $this->container['technical_contact'] = isset($data['technical_contact']) ? $data['technical_contact'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['channel_id'] === null) {
            $invalid_properties[] = "'channel_id' can't be null";
        }
        if ($this->container['channel_name'] === null) {
            $invalid_properties[] = "'channel_name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['channel_id'] === null) {
            return false;
        }
        if ($this->container['channel_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets channel_id
     * @return \Swagger\Client\Model\BeezUPCommonChannelId
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     * @param \Swagger\Client\Model\BeezUPCommonChannelId $channel_id
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets channel_name
     * @return \Swagger\Client\Model\BeezUPCommonChannelName
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     * @param \Swagger\Client\Model\BeezUPCommonChannelName $channel_name
     * @return $this
     */
    public function setChannelName($channel_name)
    {
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets channel_logo_url
     * @return \Swagger\Client\Model\BeezUPCommonHttpUrl
     */
    public function getChannelLogoUrl()
    {
        return $this->container['channel_logo_url'];
    }

    /**
     * Sets channel_logo_url
     * @param \Swagger\Client\Model\BeezUPCommonHttpUrl $channel_logo_url
     * @return $this
     */
    public function setChannelLogoUrl($channel_logo_url)
    {
        $this->container['channel_logo_url'] = $channel_logo_url;

        return $this;
    }

    /**
     * Gets channel_description
     * @return string
     */
    public function getChannelDescription()
    {
        return $this->container['channel_description'];
    }

    /**
     * Sets channel_description
     * @param string $channel_description Indicae a description to the channel
     * @return $this
     */
    public function setChannelDescription($channel_description)
    {
        $this->container['channel_description'] = $channel_description;

        return $this;
    }

    /**
     * Gets beez_up_offer
     * @return string
     */
    public function getBeezUpOffer()
    {
        return $this->container['beez_up_offer'];
    }

    /**
     * Sets beez_up_offer
     * @param string $beez_up_offer Indicate the BeezUP offer
     * @return $this
     */
    public function setBeezUpOffer($beez_up_offer)
    {
        $this->container['beez_up_offer'] = $beez_up_offer;

        return $this;
    }

    /**
     * Gets sales_contact
     * @return \Swagger\Client\Model\ChannelInfoSalesContact
     */
    public function getSalesContact()
    {
        return $this->container['sales_contact'];
    }

    /**
     * Sets sales_contact
     * @param \Swagger\Client\Model\ChannelInfoSalesContact $sales_contact
     * @return $this
     */
    public function setSalesContact($sales_contact)
    {
        $this->container['sales_contact'] = $sales_contact;

        return $this;
    }

    /**
     * Gets details
     * @return \Swagger\Client\Model\ChannelInfoDetails
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     * @param \Swagger\Client\Model\ChannelInfoDetails $details
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets key_numbers
     * @return \Swagger\Client\Model\ChannelInfoKeyNumbers
     */
    public function getKeyNumbers()
    {
        return $this->container['key_numbers'];
    }

    /**
     * Sets key_numbers
     * @param \Swagger\Client\Model\ChannelInfoKeyNumbers $key_numbers
     * @return $this
     */
    public function setKeyNumbers($key_numbers)
    {
        $this->container['key_numbers'] = $key_numbers;

        return $this;
    }

    /**
     * Gets technical_contact
     * @return \Swagger\Client\Model\ChannelInfoTechnicalContact
     */
    public function getTechnicalContact()
    {
        return $this->container['technical_contact'];
    }

    /**
     * Sets technical_contact
     * @param \Swagger\Client\Model\ChannelInfoTechnicalContact $technical_contact
     * @return $this
     */
    public function setTechnicalContact($technical_contact)
    {
        $this->container['technical_contact'] = $technical_contact;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


