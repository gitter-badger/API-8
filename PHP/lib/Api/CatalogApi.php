<?php
/**
 * CatalogApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CatalogApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CatalogApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation catalogChangeCatalogColumnUserName
     *
     * Change Catalog Column User Name
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The catalog column identifier (required)
     * @param \Swagger\Client\Model\ChangeUserColumnNameRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogChangeCatalogColumnUserName($store_id, $column_id, $request)
    {
        list($response) = $this->catalogChangeCatalogColumnUserNameWithHttpInfo($store_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation catalogChangeCatalogColumnUserNameWithHttpInfo
     *
     * Change Catalog Column User Name
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The catalog column identifier (required)
     * @param \Swagger\Client\Model\ChangeUserColumnNameRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogChangeCatalogColumnUserNameWithHttpInfo($store_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogChangeCatalogColumnUserName');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogChangeCatalogColumnUserName');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogChangeCatalogColumnUserName');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogChangeCustomColumnExpression
     *
     * Change custom column expression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeCustomColumnExpressionRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogChangeCustomColumnExpression($store_id, $column_id, $request)
    {
        list($response) = $this->catalogChangeCustomColumnExpressionWithHttpInfo($store_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation catalogChangeCustomColumnExpressionWithHttpInfo
     *
     * Change custom column expression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeCustomColumnExpressionRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogChangeCustomColumnExpressionWithHttpInfo($store_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogChangeCustomColumnExpression');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogChangeCustomColumnExpression');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogChangeCustomColumnExpression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogChangeCustomColumnUserName
     *
     * Change Custom Column User Name
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeUserColumnNameRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogChangeCustomColumnUserName($store_id, $column_id, $request)
    {
        list($response) = $this->catalogChangeCustomColumnUserNameWithHttpInfo($store_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation catalogChangeCustomColumnUserNameWithHttpInfo
     *
     * Change Custom Column User Name
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeUserColumnNameRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogChangeCustomColumnUserNameWithHttpInfo($store_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogChangeCustomColumnUserName');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogChangeCustomColumnUserName');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogChangeCustomColumnUserName');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogComputeExpression
     *
     * Compute the expression for this catalog.
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\ComputeExpressionRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function catalogComputeExpression($store_id, $request)
    {
        list($response) = $this->catalogComputeExpressionWithHttpInfo($store_id, $request);
        return $response;
    }

    /**
     * Operation catalogComputeExpressionWithHttpInfo
     *
     * Compute the expression for this catalog.
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\ComputeExpressionRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogComputeExpressionWithHttpInfo($store_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogComputeExpression');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogComputeExpression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/computeExpression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/v2/user/catalogs/{storeId}/customColumns/computeExpression'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogDeleteCustomColumn
     *
     * Delete custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogDeleteCustomColumn($store_id, $column_id)
    {
        list($response) = $this->catalogDeleteCustomColumnWithHttpInfo($store_id, $column_id);
        return $response;
    }

    /**
     * Operation catalogDeleteCustomColumnWithHttpInfo
     *
     * Delete custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogDeleteCustomColumnWithHttpInfo($store_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogDeleteCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogDeleteCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetCatalogColumns
     *
     * Get catalog column list
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CatalogColumns
     */
    public function catalogGetCatalogColumns($store_id)
    {
        list($response) = $this->catalogGetCatalogColumnsWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation catalogGetCatalogColumnsWithHttpInfo
     *
     * Get catalog column list
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CatalogColumns, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetCatalogColumnsWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetCatalogColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/catalogColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CatalogColumns',
                '/v2/user/catalogs/{storeId}/catalogColumns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CatalogColumns', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CatalogColumns', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetCategories
     *
     * Get category list
     *
     * @param string $store_id Your store identifier (required)
     * @param string[] $accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Categories
     */
    public function catalogGetCategories($store_id, $accept_encoding)
    {
        list($response) = $this->catalogGetCategoriesWithHttpInfo($store_id, $accept_encoding);
        return $response;
    }

    /**
     * Operation catalogGetCategoriesWithHttpInfo
     *
     * Get category list
     *
     * @param string $store_id Your store identifier (required)
     * @param string[] $accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Categories, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetCategoriesWithHttpInfo($store_id, $accept_encoding)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetCategories');
        }
        // verify the required parameter 'accept_encoding' is set
        if ($accept_encoding === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accept_encoding when calling catalogGetCategories');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if (is_array($accept_encoding)) {
            $accept_encoding = $this->apiClient->getSerializer()->serializeCollection($accept_encoding, 'csv');
        }
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = $this->apiClient->getSerializer()->toHeaderValue($accept_encoding);
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Categories',
                '/v2/user/catalogs/{storeId}/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Categories', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Categories', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetCustomColumnExpression
     *
     * Get the encrypted custom column expression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function catalogGetCustomColumnExpression($store_id, $column_id)
    {
        list($response) = $this->catalogGetCustomColumnExpressionWithHttpInfo($store_id, $column_id);
        return $response;
    }

    /**
     * Operation catalogGetCustomColumnExpressionWithHttpInfo
     *
     * Get the encrypted custom column expression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetCustomColumnExpressionWithHttpInfo($store_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetCustomColumnExpression');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogGetCustomColumnExpression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetCustomColumns
     *
     * Get custom column list
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CustomColumns
     */
    public function catalogGetCustomColumns($store_id)
    {
        list($response) = $this->catalogGetCustomColumnsWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation catalogGetCustomColumnsWithHttpInfo
     *
     * Get custom column list
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CustomColumns, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetCustomColumnsWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetCustomColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomColumns',
                '/v2/user/catalogs/{storeId}/customColumns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomColumns', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomColumns', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetProduct
     *
     * Get product
     *
     * @param string $store_id Your store identifier (required)
     * @param string $product_id The product identifier you want to get (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Product
     */
    public function catalogGetProduct($store_id, $product_id)
    {
        list($response) = $this->catalogGetProductWithHttpInfo($store_id, $product_id);
        return $response;
    }

    /**
     * Operation catalogGetProductWithHttpInfo
     *
     * Get product
     *
     * @param string $store_id Your store identifier (required)
     * @param string $product_id The product identifier you want to get (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetProductWithHttpInfo($store_id, $product_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetProduct');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling catalogGetProduct');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/products/{productId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "productId" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/v2/user/catalogs/{storeId}/products/{productId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetProducts
     *
     * Get product list
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\GetProductsRequest $request  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Products
     */
    public function catalogGetProducts($store_id, $request = null)
    {
        list($response) = $this->catalogGetProductsWithHttpInfo($store_id, $request);
        return $response;
    }

    /**
     * Operation catalogGetProductsWithHttpInfo
     *
     * Get product list
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\GetProductsRequest $request  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Products, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetProductsWithHttpInfo($store_id, $request = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetProducts');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Products',
                '/v2/user/catalogs/{storeId}/products'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Products', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Products', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetRandomProducts
     *
     * Get random product list
     *
     * @param string $store_id Your store identifier (required)
     * @param int $count The count of random product you want to get (optional, default to 100)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Products
     */
    public function catalogGetRandomProducts($store_id, $count = null)
    {
        list($response) = $this->catalogGetRandomProductsWithHttpInfo($store_id, $count);
        return $response;
    }

    /**
     * Operation catalogGetRandomProductsWithHttpInfo
     *
     * Get random product list
     *
     * @param string $store_id Your store identifier (required)
     * @param int $count The count of random product you want to get (optional, default to 100)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Products, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetRandomProductsWithHttpInfo($store_id, $count = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetRandomProducts');
        }
        if (!is_null($count) && ($count > 100)) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling CatalogApi.catalogGetRandomProducts, must be smaller than or equal to 100.');
        }
        if (!is_null($count) && ($count < 25)) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling CatalogApi.catalogGetRandomProducts, must be bigger than or equal to 25.');
        }

        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/products/random";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Products',
                '/v2/user/catalogs/{storeId}/products/random'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Products', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Products', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogSaveCustomColumn
     *
     * Create or replace a custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\CreateCustomColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogSaveCustomColumn($store_id, $column_id, $request)
    {
        list($response) = $this->catalogSaveCustomColumnWithHttpInfo($store_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation catalogSaveCustomColumnWithHttpInfo
     *
     * Create or replace a custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\CreateCustomColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogSaveCustomColumnWithHttpInfo($store_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogSaveCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogSaveCustomColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogSaveCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetManualUpdateLastInputConfig
     *
     * Get the last input configuration
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LastManualImportInputConfiguration
     */
    public function importationGetManualUpdateLastInputConfig($store_id)
    {
        list($response) = $this->importationGetManualUpdateLastInputConfigWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation importationGetManualUpdateLastInputConfigWithHttpInfo
     *
     * Get the last input configuration
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LastManualImportInputConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetManualUpdateLastInputConfigWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetManualUpdateLastInputConfig');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/inputConfiguration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LastManualImportInputConfiguration',
                '/v2/user/catalogs/{storeId}/inputConfiguration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LastManualImportInputConfiguration', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LastManualImportInputConfiguration', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
