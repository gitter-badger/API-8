<?php
/**
 * ImportationProcessApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ImportationProcessApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImportationProcessApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ImportationProcessApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation importationCancel
     *
     * Cancel importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationCancel($store_id, $execution_id)
    {
        list($response) = $this->importationCancelWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationCancelWithHttpInfo
     *
     * Cancel importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationCancelWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationCancel');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationCancel');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationCommit
     *
     * Commit Importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationCommit($store_id, $execution_id)
    {
        list($response) = $this->importationCommitWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationCommitWithHttpInfo
     *
     * Commit Importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationCommitWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationCommit');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationCommit');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/commit";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/commit'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationCommitColumns
     *
     * Commit columns
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationCommitColumns($store_id, $execution_id)
    {
        list($response) = $this->importationCommitColumnsWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationCommitColumnsWithHttpInfo
     *
     * Commit columns
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationCommitColumnsWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationCommitColumns');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationCommitColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationConfigureRemainingCatalogColumns
     *
     * Configure remaining catalog columns
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationConfigureRemainingCatalogColumns($store_id, $execution_id)
    {
        list($response) = $this->importationConfigureRemainingCatalogColumnsWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationConfigureRemainingCatalogColumnsWithHttpInfo
     *
     * Configure remaining catalog columns
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationConfigureRemainingCatalogColumnsWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationConfigureRemainingCatalogColumns');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationConfigureRemainingCatalogColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetImportationMonitoring
     *
     * Get the importation status
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ImportationMonitoring
     */
    public function importationGetImportationMonitoring($store_id, $execution_id)
    {
        list($response) = $this->importationGetImportationMonitoringWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationGetImportationMonitoringWithHttpInfo
     *
     * Get the importation status
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ImportationMonitoring, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetImportationMonitoringWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetImportationMonitoring');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetImportationMonitoring');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImportationMonitoring',
                '/v2/user/catalogs/{storeId}/importations/{executionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImportationMonitoring', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImportationMonitoring', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetReportings
     *
     * Get the latest catalog importation reporting
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ImportationReporting[]
     */
    public function importationGetReportings($store_id)
    {
        list($response) = $this->importationGetReportingsWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation importationGetReportingsWithHttpInfo
     *
     * Get the latest catalog importation reporting
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ImportationReporting[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetReportingsWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetReportings');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImportationReporting[]',
                '/v2/user/catalogs/{storeId}/importations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImportationReporting[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImportationReporting[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationStartManualUpdate
     *
     * Start Manual Import
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\StartManualImportRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BeezUPCommonLink2[]
     */
    public function importationStartManualUpdate($store_id, $request)
    {
        list($response) = $this->importationStartManualUpdateWithHttpInfo($store_id, $request);
        return $response;
    }

    /**
     * Operation importationStartManualUpdateWithHttpInfo
     *
     * Start Manual Import
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\StartManualImportRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BeezUPCommonLink2[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importationStartManualUpdateWithHttpInfo($store_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationStartManualUpdate');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationStartManualUpdate');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BeezUPCommonLink2[]',
                '/v2/user/catalogs/{storeId}/importations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BeezUPCommonLink2[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonLink2[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationTechnicalProgression
     *
     * Get technical progression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ImportationTechnicalProgression
     */
    public function importationTechnicalProgression($store_id, $execution_id)
    {
        list($response) = $this->importationTechnicalProgressionWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationTechnicalProgressionWithHttpInfo
     *
     * Get technical progression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ImportationTechnicalProgression, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationTechnicalProgressionWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationTechnicalProgression');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationTechnicalProgression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImportationTechnicalProgression',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImportationTechnicalProgression', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImportationTechnicalProgression', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
