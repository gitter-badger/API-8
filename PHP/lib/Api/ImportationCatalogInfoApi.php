<?php
/**
 * ImportationCatalogInfoApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ImportationCatalogInfoApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImportationCatalogInfoApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ImportationCatalogInfoApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation importationConfigureCatalogColumn
     *
     * Configure catalog column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ConfigureCatalogColumnCatalogRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationConfigureCatalogColumn($store_id, $execution_id, $column_id, $request)
    {
        list($response) = $this->importationConfigureCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation importationConfigureCatalogColumnWithHttpInfo
     *
     * Configure catalog column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ConfigureCatalogColumnCatalogRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationConfigureCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationConfigureCatalogColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationConfigureCatalogColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationConfigureCatalogColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationConfigureCatalogColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationDeleteCustomColumn
     *
     * Delete Custom Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationDeleteCustomColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationDeleteCustomColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationDeleteCustomColumnWithHttpInfo
     *
     * Delete Custom Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationDeleteCustomColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationDeleteCustomColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationDeleteCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationDeleteCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetCustomColumnExpression
     *
     * Get the encrypted custom column expression in this importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function importationGetCustomColumnExpression($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationGetCustomColumnExpressionWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationGetCustomColumnExpressionWithHttpInfo
     *
     * Get the encrypted custom column expression in this importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetCustomColumnExpressionWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetCustomColumnExpression');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetCustomColumnExpression');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationGetCustomColumnExpression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetCustomColumns
     *
     * Get custom columns currently place in this importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CustomColumns[]
     */
    public function importationGetCustomColumns($store_id, $execution_id)
    {
        list($response) = $this->importationGetCustomColumnsWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationGetCustomColumnsWithHttpInfo
     *
     * Get custom columns currently place in this importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CustomColumns[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetCustomColumnsWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetCustomColumns');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetCustomColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomColumns[]',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomColumns[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomColumns[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetDetectedCatalogColumns
     *
     * Get detected catalog columns during this importation.
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DetectedCatalogColumns
     */
    public function importationGetDetectedCatalogColumns($store_id, $execution_id)
    {
        list($response) = $this->importationGetDetectedCatalogColumnsWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationGetDetectedCatalogColumnsWithHttpInfo
     *
     * Get detected catalog columns during this importation.
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DetectedCatalogColumns, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetDetectedCatalogColumnsWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetDetectedCatalogColumns');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetDetectedCatalogColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DetectedCatalogColumns',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DetectedCatalogColumns', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DetectedCatalogColumns', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetProductSample
     *
     * Get the product sample related to this importation with all columns (catalog and custom)
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param int $product_sample_index Index of the product sample. Starting from 0 to 99. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProductSample
     */
    public function importationGetProductSample($store_id, $execution_id, $product_sample_index)
    {
        list($response) = $this->importationGetProductSampleWithHttpInfo($store_id, $execution_id, $product_sample_index);
        return $response;
    }

    /**
     * Operation importationGetProductSampleWithHttpInfo
     *
     * Get the product sample related to this importation with all columns (catalog and custom)
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param int $product_sample_index Index of the product sample. Starting from 0 to 99. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProductSample, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetProductSampleWithHttpInfo($store_id, $execution_id, $product_sample_index)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetProductSample');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetProductSample');
        }
        // verify the required parameter 'product_sample_index' is set
        if ($product_sample_index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_sample_index when calling importationGetProductSample');
        }
        if (($product_sample_index > 99)) {
            throw new \InvalidArgumentException('invalid value for "$product_sample_index" when calling ImportationCatalogInfoApi.importationGetProductSample, must be smaller than or equal to 99.');
        }
        if (($product_sample_index < 0)) {
            throw new \InvalidArgumentException('invalid value for "$product_sample_index" when calling ImportationCatalogInfoApi.importationGetProductSample, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($product_sample_index !== null) {
            $resourcePath = str_replace(
                "{" . "productSampleIndex" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_sample_index),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSample',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSample', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSample', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetProductSampleCustomColumnValue
     *
     * Get product sample custom column value related to this importation.
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param int $product_sample_index Index of the product sample. Starting from 0 to 99. (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function importationGetProductSampleCustomColumnValue($store_id, $execution_id, $product_sample_index, $column_id)
    {
        list($response) = $this->importationGetProductSampleCustomColumnValueWithHttpInfo($store_id, $execution_id, $product_sample_index, $column_id);
        return $response;
    }

    /**
     * Operation importationGetProductSampleCustomColumnValueWithHttpInfo
     *
     * Get product sample custom column value related to this importation.
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param int $product_sample_index Index of the product sample. Starting from 0 to 99. (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetProductSampleCustomColumnValueWithHttpInfo($store_id, $execution_id, $product_sample_index, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetProductSampleCustomColumnValue');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetProductSampleCustomColumnValue');
        }
        // verify the required parameter 'product_sample_index' is set
        if ($product_sample_index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_sample_index when calling importationGetProductSampleCustomColumnValue');
        }
        if (($product_sample_index > 99)) {
            throw new \InvalidArgumentException('invalid value for "$product_sample_index" when calling ImportationCatalogInfoApi.importationGetProductSampleCustomColumnValue, must be smaller than or equal to 99.');
        }
        if (($product_sample_index < 0)) {
            throw new \InvalidArgumentException('invalid value for "$product_sample_index" when calling ImportationCatalogInfoApi.importationGetProductSampleCustomColumnValue, must be bigger than or equal to 0.');
        }

        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationGetProductSampleCustomColumnValue');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($product_sample_index !== null) {
            $resourcePath = str_replace(
                "{" . "productSampleIndex" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_sample_index),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationIgnoreColumn
     *
     * Ignore Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationIgnoreColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationIgnoreColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationIgnoreColumnWithHttpInfo
     *
     * Ignore Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationIgnoreColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationIgnoreColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationIgnoreColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationIgnoreColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationMapCatalogColumn
     *
     * Map catalog column to a BeezUP column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The catalog column identifier (required)
     * @param \Swagger\Client\Model\MapBeezUPColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationMapCatalogColumn($store_id, $execution_id, $column_id, $request)
    {
        list($response) = $this->importationMapCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation importationMapCatalogColumnWithHttpInfo
     *
     * Map catalog column to a BeezUP column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The catalog column identifier (required)
     * @param \Swagger\Client\Model\MapBeezUPColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationMapCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationMapCatalogColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationMapCatalogColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationMapCatalogColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationMapCatalogColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationMapCustomColumn
     *
     * Map custom column to a BeezUP column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\MapBeezUPColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationMapCustomColumn($store_id, $execution_id, $column_id, $request)
    {
        list($response) = $this->importationMapCustomColumnWithHttpInfo($store_id, $execution_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation importationMapCustomColumnWithHttpInfo
     *
     * Map custom column to a BeezUP column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\MapBeezUPColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationMapCustomColumnWithHttpInfo($store_id, $execution_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationMapCustomColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationMapCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationMapCustomColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationMapCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationReattendColumn
     *
     * Reattend Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationReattendColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationReattendColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationReattendColumnWithHttpInfo
     *
     * Reattend Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationReattendColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationReattendColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationReattendColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationReattendColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationSaveCustomColumn
     *
     * Create or replace a custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeCustomColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationSaveCustomColumn($store_id, $execution_id, $column_id, $request)
    {
        list($response) = $this->importationSaveCustomColumnWithHttpInfo($store_id, $execution_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation importationSaveCustomColumnWithHttpInfo
     *
     * Create or replace a custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeCustomColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationSaveCustomColumnWithHttpInfo($store_id, $execution_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationSaveCustomColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationSaveCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationSaveCustomColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationSaveCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationUnmapCatalogColumn
     *
     * Unmap catalog column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The catalog column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationUnmapCatalogColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationUnmapCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationUnmapCatalogColumnWithHttpInfo
     *
     * Unmap catalog column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The catalog column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationUnmapCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationUnmapCatalogColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationUnmapCatalogColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationUnmapCatalogColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationUnmapCustomColumn
     *
     * Unmap custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationUnmapCustomColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationUnmapCustomColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationUnmapCustomColumnWithHttpInfo
     *
     * Unmap custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationUnmapCustomColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationUnmapCustomColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationUnmapCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationUnmapCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
